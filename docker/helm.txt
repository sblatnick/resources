#Helm
  #Helm is like yum/apt, and installs to the current kubectl context
  #Helm 2 only: Tiller is the server component

  #Install helm client (OSX):
  brew install kubernetes-helm

  #Add repos to helm (in addition to stable):
  #Deprecated:
    helm repo add stable https://charts.helm.sh/stable
    helm repo add incubator https://charts.helm.sh/incubator
  #OpenEBS repo:
    helm repo add openebs https://openebs.github.io/charts
    helm repo update
    helm install openebs openebs/openebs -n openebs --create-namespace
  helm repo update

  #List repos:
  helm repo list

  #Search Repo:
  helm search repo ${repo} ${chart}
  
  #Modify charts:
  git clone git@github.com:helm/charts.git

  #Initialize (helm 2):
  helm init
  helm init --upgrade #update tiller to latest
  #TODO: check using TLS and securing

  #Fix 'no matches for kind "ServiceMonitor"': https://github.com/helm/charts/issues/9941#issuecomment-447844259
  git clone git@github.com:coreos/prometheus-operator.git
  cd prometheus-operator/example/prometheus-operator-crd/
  for file in *.yaml;do kubectl apply -f $file;done

  #Fix missing daemonsets/deployments/replicasets ('no matches for kind "DaemonSet"'): https://github.com/kubernetes/kubernetes/issues/84782#issuecomment-549791247
  # daemonsets, deployments, replicasets = extensions/v1beta1 => apps/v1
    #Change:
      apiVersion: extensions/v1beta1
    #To:
      apiVersion: apps/v1

  #Fix "Error: no available release name found"
  kubectl create serviceaccount --namespace kube-system tiller
  kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
  kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'
  #source: https://github.com/helm/helm/issues/3055

  #Update repo chart cache:
  helm repo update
  
  #Install packages:
    helm install stable/mysql incubator/cassandra
    #incubator: experimental

    #helm v2: https://v2-14-0.helm.sh/docs/helm/#helm-install
      helm install release repo/chart --namespace my-namespace         #release named
      helm install repo/chart --namespace my-namespace                 #random release name
    #helm v3:
      #no longer creates namespace for you: https://github.com/helm/helm/issues/5753#issuecomment-502163585
      kubectl create namespace my-namespace
      helm install -n release repo/chart --namespace my-namespace      #release named
      helm install repo/chart --generate-name --namespace my-namespace #random release name

    #install doku wiki:
      #prereqs: install metallb, openebs
      #conflicts: nginx, traefik (k3s default)
      
      helm repo add bitnami https://charts.bitnami.com/bitnami
      kubectl create namespace doku
      #Singleton:
      helm install --namespace doku doku --set dokuwikiUsername=admin,dokuwikiPassword=password,persistence.storageClass=openebs-jiva-default,persistence.size=3Gi bitnami/dokuwiki
      #NFS:
      helm install --namespace doku doku --set dokuwikiUsername=admin,dokuwikiPassword=password,persistence.storageClass=nfs,persistence.size=2790M bitnami/dokuwiki

      #uninstall:
      helm delete --namespace doku doku
      
      #increase replica count (don't scale the replicaset, NFS-only):
      kubectl -n doku scale --replicas 3 deployment/doku-dokuwiki

      #see which node the pods are on:
      kubectl -n doku get pod -o wide

      #Error openebs "failed calling webhook"? https://github.com/openebs/openebs/issues/3046
      EDITOR=vi
      kubectl edit validatingwebhookconfigurations openebs-validation-webhook-cfg
        -failurePolicy: Fail
        +failurePolicy: Ignore

    #Install using different releases and namespaces with the same charts:
    helm install -f "values.yaml,cassandra.yaml" --namespace cassandra -n cassandra-storage ./local-storage
    #Install using local settings:
    helm install -f "values.yaml,cassandra.yaml" --namespace cassandra -n cassandra incubator/cassandra

    #Uninstall:
    helm delete --purge cassandra-storage cassandra #--purge helm.v2
    #Cleanup local volumes:
    kubectl -n cassandra delete $(kubectl -n cassandra get pvc -o=name)

    #Note: When installing without the -n, a random release name is created, which can be viewed using `helm list`

    #Download chart:
    helm fetch stable/mysql

    helm get [command] [release]
      #commands:
        <not passed> #all sections
        hooks
        manifest
        notes
        values

    #parse unique hiera values from helm templates:
    while read -u 3 line
    do
      output=""
      for attribute in $(echo "${line}" | tr '.' ' ')
      do
        output="$output.$attribute"
        echo "$output"
      done
    done 3< <(grep -hEro '.Values.[a-zA-Z.]*' templates/ | sort | uniq | cut -d. -f 3-) | sort | uniq | sed -e 's/^.//' -e 's/[^\.]*\./  /g' -e 's/$/:/'

  #Generate kubectl create|apply yaml files to use where helm isn't available:
    #helm3 for --output-dir
    helm template --output-dir chart/yaml chartname ./chart --debug --namespace chart

    #Example with nginx-ingress overriding values.yaml:
    helm fetch --untar --debug stable/nginx-ingress
    mkdir nginx-ingress/yaml
    helm template --output-dir nginx-ingress/yaml nginx-ingress ./nginx-ingress --debug --namespace nginx-ingress -f nginx-ingress.yaml

    cd nginx-ingress/yaml/nginx-ingress/templates
    namespace=nginx-ingress

    for yaml in *.yaml
    do
      echo kubectl -n ${namespace} create -f $yaml
      kubectl -n ${namespace} create -f $yaml
    done

  #Dependencies:
    cd mychart
    helm dependency update
    #creates requirements.lock and downloads tgz of reqs to mychart/chart/

    #Example requirements.yaml:
    dependencies:
    - name: cassandra
      version: 0.10.2
      repository: https://kubernetes-charts-incubator.storage.googleapis.com/
    - name: prometheus
      version: 8.6.1
      repository: https://kubernetes-charts.storage.googleapis.com/
      condition: subchart1.enabled,global.subchart1.enabled
      alias: subchart1
      tags:
        - back-end
    #Example configuration of subcharts in values.yaml:
    cassandra:
      persistence:
        enabled: true
        size: 100Gi
        storageClass: openebs-standard
    prometheus:
      alertmanager:
        persistentVolume:
          storageClass: openebs-standard
      server:
        persistentVolume:
          storageClass: openebs-standard
    #Example accessing value in subchart with a - in the name:
    {{ if index .Values "prometheus-operator" "enabled" }}

  #Update chart definition
  helm upgrade release_name ./path/chart

  #Look at features:
  helm inspect stable/mysql

  #List deployed releases:
  helm list #--all-namespaces helm.v3
  helm ls --all

  #Remove release:
  helm delete wintering-rodent
  helm del --purge honorary-crab #--purge helm.v2

  #Status (works after deletion):
  helm status wintering-rodent

  #Undelete:
  helm rollback

  #Help:
  helm help
  helm -h
  helm get -h

  #Search:
  helm search cassandra

  #List versions available:
  helm search -l stable/mysql

  #Debugging:
    #Test generated definitions:
    helm install --dry-run --debug ./my-chart --set service.internalPort=8080
    #Check syntax:
    helm lint
    #Look at tiller logs:
    kubectl -n kube-system get pod
    kubectl -n kube-system logs -f tiller-deploy-8485766469-pkgwz

  #Run local repository:
  helm serve

  helm search local

#Charts

  #Helm Packages are called "charts", and can be in .tgz or just a folder

  helm create mychart
    mychart
    |-- Chart.yaml
    |-- charts              #sub-charts, which can inherit from parent's values.yaml "mysubchart:" sections
    |-- templates           #rendered using 'Go template' https://golang.org/pkg/text/template/
    |   |-- NOTES.txt       #printed on deployment as useful info, rendered as a template
    |   |-- _helpers.tpl
    |   |-- deployment.yaml
    |   |-- ingress.yaml
    |   |-- service.yaml
    |-- values.yaml
    |-- requirements.yaml   #dependencies (optional)

#Templates
  #source: https://docs.helm.sh/chart_template_guide/

  #All files in templates/ will be parsed using GoTemplates except NOTES.txt
  #convention:
  # .yaml for specs
  # .tpl for helpers
  # _ prefix means not to create resources from it (not a manifest)

  #namespaced objects:

    {{ .Release.Name }}           #release name
    {{ .Release.Time }}           #time of release
    {{ .Release.Namespace }}      #namespace to be released into
    {{ .Release.Service }}        #name of releasing service (always Tiller)
    {{ .Release.Revision }}       #begins at 1, increments with each `helm upgrade`
    {{ .Release.IsUpgrade }}      #true if current operation is an upgrade or rollback
    {{ .Release.IsInstall }}      #true if current operation is an install

    {{ .Values.first.second }}    #from values.yaml heirarchy (default: empty)
    {{ .Chart }}                  #from Chart.yaml

    #Files
    {{ .Files.Get config.ini }}   #get file by name
    {{ .Files.GetBytes c.ini }}   #get file as array of bytes

      #Globbing Files:
      {{ range $path, $bytes := .Files.Glob "foo/*" }}
      {{ base $path }}: '{{ $root.Files.Get $path | b64enc }}'
      {{ end }}
      #Lines:
      data:
        some-file.txt: {{ range .Files.Lines "foo/bar.txt" }}
          {{ . }}{{ end }}

    #Capabilities the Kubernetes cluster supports:
    {{ .Capabilities.APIVersions }}
    {{ .Capabilities.APIVersions.Has "batch/v1" }}
    {{ .Capabilities.KubeVersion.Major }}
    {{ .Capabilities.KubeVersion.Minor }}
    {{ .Capabilities.KubeVersion.GitVersion }}
    {{ .Capabilities.KubeVersion.GitCommit }}
    {{ .Capabilities.KubeVersion.GitTreeState }}
    {{ .Capabilities.KubeVersion.BuildDate }}
    {{ .Capabilities.KubeVersion.GoVersion }}
    {{ .Capabilities.KubeVersion.Compiler }}
    {{ .Capabilities.KubeVersion.Platform }}
    {{ .Capabilities.TillerVersion.SemVer }}
    {{ .Capabilities.TillerVersion.GitCommit }}
    {{ .Capabilities.TillerVersion.GitTreeState }}

    #Info about the current template being executed:
    {{ .Template.Name }}          #namespaced filepath mychart/templates/mytemplate.yaml
    {{ .Template.BasePath }}      #namespaced path to templates directory mychart/templates

  #Delete key:
    key: null

  #Functions/Pipes:
    #Usage:
      {{ quote .Values.example }}
      {{ Values.example | quote }}
    #Built in:
      indent 2 "string"
      | quote
      | default "value"
      | upper
      | nindent 4 #multiline indent, useful with include
      | b64enc
    #Path helpers:
      base
      dir
      ext
      isAbs
      clean
    #Define (golang, untested, not recommended, use templates instead):
      func example(x int, s string) string {
        return fmt.Sprintf("%d%s", x, s)
      }

  #Boolean:
    false: false, zero, "", nil, null, empty collection

  #Operators:
    {{ if PIPELINE }}
      # Do something
    {{ else if OTHER PIPELINE }}
      # Do something else
    {{ else }}
      # Default case
    {{ end }}
    if
    else
    with
    range
    define
    template
    block

  #Formatting:
    {{- #trim preceeding whitespace/newline
    -}} #trim trailing whitespace/newline

  #Scope:
    $. #$. is always global/root context $.Values

    #with:
      {{- with .Values.favorite }}
      drink: {{ .drink | default "tea" | quote }}
      food: {{ .food | upper | quote }}
      {{- end }}
      release: {{ .Release.Name }} #must put any non-scoped outside

  #Variables:
    {{ $variable := "example" }}

  #Loops:

    #Array:
      toppings: |- #multiline string with - meaning to trim off the newline, + means preserve
        {{- range .Values.pizzaToppings }}
        - {{ . | title | quote }}
        {{- end }}
      #Inline:
      sizes: |-
        {{- range tuple "small" "medium" "large" }}
        - {{ . }}
        {{- end }}
    #Index:
      toppings: |-
        {{- range $index, $topping := .Values.pizzaToppings }}
          {{ $index }}: {{ $topping }}
        {{- end }}
    #Key/Value:
      {{- range $key, $val := .Values.favorite }}
      {{ $key }}: {{ $val | quote }}
      {{- end}}

  #Collections:
    map
    slice
    tuple #list of fixed size
    dict
    array

  #Documentation:
    {{/* Text */}}

  #Templates:
    #Named Templates are like snippets
    #shared between parent chart and all subcharts
    #template/define (normally in _helpers.tpl)
      #template is an action, not function, so it can't be post processed
      {{ define "mychart.snippet" }}
        # body of template here
      {{ end }}
      
      {{ template "mychart.snippet" . }} # . = scope passed in
    
    #include/define
      #same as template, but pipeable like a function

      labels:
        {{- include "mychart.snippet" . | nindent 4 }}

    #block
      #discouraged in helm charts as they claim if defined multiple times, it is unclear which is used
      #same as define and print template in one line:
      {{ block "mychart.snippet" | quote }}
        # body of template here
      {{ end }}

      #source: https://www.reddit.com/r/golang/comments/7apv04/what_is_the_difference_between_template_and_block/

#Helm chart hooks: https://helm.sh/docs/topics/charts_hooks/
  helm install ${chart}
    pre-install
    post-install
  helm upgrade ${chart}
    pre-install
    post-install
    
    pre-delete
    post-delete

    post-upgrade

    pre-rollback
    post-rollback

    test

  #Example: templates/post-install-job.yaml
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        app.kubernetes.io/version: {{ .Chart.AppVersion }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
      annotations:
        # This is what defines this resource as a hook. Without this line, the
        # job is considered part of the release.
        "helm.sh/hook": post-install,post-upgrade #Comma delimit for applying one resource to multiple hooks
        "helm.sh/hook-weight": "-5" #ascending order
        "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
          #Possible values:
            before-hook-creation  (DEFAULT) Delete the previous resource before a new hook is launched
            hook-succeeded        Delete the resource after the hook is successfully executed
            hook-failed           Delete the resource if the hook failed during execution 
    spec:
      template:
        metadata:
          name: "{{ .Release.Name }}"
          labels:
            app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
            app.kubernetes.io/instance: {{ .Release.Name | quote }}
            helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        spec:
          restartPolicy: Never
          containers:
          - name: post-install-job
            image: "alpine:3.3"
            command: ["/bin/sleep","{{ default "10" .Values.sleepyTime }}"]


#Helm CRD (Custom Resouce Definitions) https://helm.sh/docs/chart_best_practices/custom_resource_definitions/
  #Sometimes CRDs must be created before deploying pods.
  #Put their definitions in the "crds" folder (Helm 2: "crd-install")

#values.yaml:

  example:
    - "hiera"
  mysubchart:
    example: "" #addressable in subchart as Values.example and in parent chart as Values.mysubchart.example
  global:
    example: "" #addressable from any template as Values.global.example

#Helm 2 to 3 migration: https://helm.sh/blog/migrate-from-helm-v2-to-helm-v3/ https://helm.sh/docs/faq/

  #install plugin:
  helm plugin install https://github.com/helm/helm-2to3

  #migrate repos to new configs (instead of re-adding `helm repo add name url`):
  helm 2to3 move config --dry-run
  helm 2to3 move config

  #convert releases from v2 to v3:
  helm 2to3 convert --dry-run release
  helm 2to3 convert release

  #check it exists, now with a namespace:
  helm list -n namespace
  helm list --all-namespaces

  #clean up v2 and tiller:
  helm 2to3 cleanup --dry-run
  helm 2to3 cleanup


