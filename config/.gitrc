#!/bin/bash

export GIT_MERGE_AUTOEDIT=no
export GITEX_CONFIG=~/.git-extend

#redundant wrappers from .bash_aliases:
export wgit=$(which git) #wrapped git
export wless=$(which less) #wrapped less

shopt -s expand_aliases extglob

#----------------------------------COMPLETIONS-----------------------------------#
function gitex_complete() {
  COMPREPLY=()
  case "${COMP_CWORD}" in
    1)
        #core commands:
        COMPREPLY=($(compgen -W "$(git help -a | grep -o "^   [^ ]* ")" -- "${COMP_WORDS[1]}"))

        local IFS=$'\n'
        complete_sections ${BASH_SOURCE}
      ;;
    2)
        complete_pwd
        case "${COMP_WORDS[1]}" in
          context|ctx|go)
              COMPREPLY=()
              section="##Context Actions (context|ctx|go):"
              if [ -f ${GITEX_CONFIG} ];then
                source ${GITEX_CONFIG}
                #add contexts:
                COMPREPLY+=($(compgen -W "$(grep -E '="$' ${GITEX_CONFIG} | sed 's/="$//' | tr $'\n' ' ')" -- "${COMP_WORDS[2]}"))
                #add repos:
                COMPREPLY+=($(compgen -W "$(echo "${!current}" | sed -e '/^$/d' -e 's/\/.*\///g' | tr $'\n' ' ')" -- "${COMP_WORDS[2]}"))
              fi
            ;;
          svn)
              COMPREPLY=($(compgen -W "$($wgit svn 2>&1 | grep "^  [a-z]" | cut -d' ' -f3)" -- "${COMP_WORDS[2]}"))
              section="##SVN Actions:"
            ;;
          co)
              COMPREPLY=($(compgen -W "$($wgit --no-pager branch | sed 's/^\*//')" -- "${COMP_WORDS[2]}"))
            ;;
          do|dob|mod|mob)
              COMPREPLY=($(compgen -W "$(git help -a | grep -Eo "^  *[a-z-]*")" -- "${COMP_WORDS[2]}"))
            ;;
        esac

        complete_section "${section}" ${BASH_SOURCE}
      ;;
    *)
        complete_pwd
      ;;
  esac
}
complete -o nospace -F gitex_complete git

#----------------------------------FUNCTIONS-----------------------------------#
function bash_prompt()
{
  export SIT_CURRENT='NULL' #ensure the terminal has a separate sit context
  export BRANCH=$($wgit rev-parse --abbrev-ref HEAD 2>/dev/null | sed 's~^\(heads\|tags\|remotes\)/~~')
  dirty=''
  if [ -n "$($wgit status --porcelain 2>/dev/null)" ]; then
    dirty='*'
  fi
  if [ -x /usr/libexec/vte-urlencode-cwd ];then
    printf "\033]7;file://%s%s\033\\" "${HOSTNAME}" "$(/usr/libexec/vte-urlencode-cwd)"
  fi
  PS1="\w \[\033[32m\]$BRANCH\[\033[36m\]$dirty\[\033[0m\]\[\033[${SC-0}m\]\$\[\033[0m\] "
  if [ -z "${TERM_NAME}" ];then
    TOPLEVEL=$($wgit rev-parse --show-toplevel 2>/dev/null)
    if [ -z "${TOPLEVEL}" ];then
      echo -en "\033]0;${PWD##*/}\a"
    else
      echo -en "\033]0;${TOPLEVEL##*/}\a"
    fi
  fi
}
PROMPT_COMMAND=bash_prompt

#print git:
function pgit() {
  echo -e "\033[34mgit $@\033[0m"
  $wgit $@ 2>&1 | sed 's/^/  /'
}

##Main:
function gitex() {
  #------------------------------------SETUP-------------------------------------#

  if [ -f ${GITEX_CONFIG} ];then
    source ${GITEX_CONFIG}
  else
    echo -e "\033[33mgitex first run...\033[0m"

    echo "  set pager, changing tab length"
      #Always use pager -cx2 -+F source: https://stackoverflow.com/questions/12352049/always-use-the-pager-for-git-diff
      # -c  = clear screen
      # -F  = exit if one screen
      # -+F = always use
      # -x  = tab stops number of spaces
      $wgit config --global core.pager 'less -x2'

    echo "  allow simple push/pull"
      $wgit config --global push.default simple # tracking ?
      #$wgit config --global pull.ff only
      $wgit config --global pull.rebase true

    echo "  set default branch"
      $wgit config --global init.defaultBranch master

    echo "  setup colors..."
      $wgit config --global color.diff auto
      $wgit config --global color.branch auto
      $wgit config --global color.status auto

      $wgit config --global color.branch.current "yellow reverse"
      $wgit config --global color.branch.local yellow
      $wgit config --global color.branch.remote green

      $wgit config --global color.diff.whitespace "red reverse"

      $wgit config --global color.status.added yellow
      $wgit config --global color.status.changed green
      $wgit config --global color.status.untracked cyan

    #echo "  setup aliases..."

    touch ${GITEX_CONFIG}
    echo -e "\033[32mDONE\033[0m"
  fi

  #------------------------------------MAIN--------------------------------------#
  actions=$(sed -n "/^##Group Actions:\$/,/^\}\$/ p" $BASH_SOURCE | grep -Eo '[^ (]+\)\s+#.*$' | sed 's/).*$//' | tr $'\n' '|' | sed 's/|$//')

  case "$1" in
    help)
        $wgit $@
        if [ $# -gt 1 ];then
          return
        fi
        echo ""
        git ex
      ;;
    ex) ##print this usage information
        BIN='git' document_title "Extended Git Usage" "actions"
        document ${BASH_SOURCE}
        echo ""
      ;;
    com|cam|cc) #[message]#alias to commit -a -m
        shift
        if [ -n "$@" ];then
          $wgit commit -a -m "$@"
        else
          echo -e "\033[31mNo commit message specified\033[0m"
          return 1
        fi
      ;;
    bcc) #[message]#Use your last commit message's prefix before first colon
        shift
        local last=$($wgit --no-pager log --no-merges --format=%s --author=${USER} | head -n 1)
        local prefix=${last%%:*}
        if [ -z "$@" ];then
          echo -e "\033[31mNo commit message specified\033[0m"
          return 1
        elif [ -z "${prefix}" ];then
          echo -e "\033[31mNo prefix in last commit\033[0m"
          return 1
        else
          $wgit commit -a -m "${prefix}: $@"
        fi
      ;;
    co) ##reasonable default checkout branch
        shift
        branch=$1

        #List branches:
        if [ -z "${branch}" ];then
          $wgit --no-pager branch
          return
        fi

        #local branch?
        b=$($wgit --no-pager branch --list ${branch})
        if [ -n "$b" ];then
          echo -e "\033[33mcheckout local branch ${branch}\033[0m"
          $wgit checkout ${branch}
          return $?
        fi

        #svn branch?
        url=$($wgit config --get svn-remote.svn.url)
        if [ -n "${url}" ];then
          echo -e "\033[33mcheckout svn branch ${branch}\033[0m"
          git svn co ${branch}
          return $?
        fi

        #specific remote branch?
        if $wgit remote | grep -q "^${branch%%/*}\$";then
          echo -e "\033[33mtrack specific remote branch ${branch}\033[0m"
          $wgit checkout --track ${branch}
          return $?
        fi

        #find remote branch
        for remote in $($wgit remote)
        do
          git rev-parse --abbrev-ref ${remote}/${branch} >/dev/null 2>&1
          if [ $? -eq 0 ];then
            echo -e "\033[33mtrack remote branch ${remote}/${branch}\033[0m"
            $wgit checkout --track ${remote}/${branch}
            return $?
          fi
        done

        #no existing branch found, so create one:
        echo -e "\033[33mcheckout/create local branch\033[0m"
        $wgit checkout -b ${branch}
        return $?
      ;;
    ls|rs) #[rm] [pattern]#remote branch listing, rm to delete local branches
        shift
        local branches=$($wgit --no-pager branch --format '%(refname:lstrip=1)' | sed 's/^heads/local/')$'\n'$($wgit --no-pager branch -r --format '%(refname:lstrip=2)')
        local IFS=$'\n'
        if [[ "$1" == "rm" ]];then
          local delete='true'
          remotes=(local)
          shift
        else
          remotes=(local $(git remote))
        fi
        for remote in ${remotes[@]}
        do
          echo -e "\033[32m${remote}\033[0m"
          if [ -n "$1" ];then
            if [[ "${delete}" == 'true' ]];then
              for branch in $(echo "${branches}" | grep "^local/" | grep "$1" | sed -n "/${remote}\// s///p")
              do
                echo -e "  \033[31mdeleting\033[0m ${branch}"
                $wgit branch -D ${branch}
              done
            else
              echo "${branches}" | grep "$1" | sed -n "/${remote}\// s//  /p"
            fi
          else
            echo "${branches}" | grep "^${remote}/" | sed -n "/${remote}\// s//  /p"
          fi
        done
      ;;
    modified|edit|ed) ##open dirty files in $EDITOR
        dir=$(pwd)
        local IFS=$'\n'
        files=$($wgit status -s)
        for file in $files
        do
          $EDITOR $dir/${file##* }
        done
      ;;
    resolve|mark) ##mark resolution on all conflicts
        dir=$(pwd)
        local IFS=$'\n'
        files=$($wgit status -s | grep '^UU ')
        for file in $files
        do
          echo -e "git add ${file##* }"
          $wgit add ${file##* }
        done
      ;;
    push) ##reasonable default push
        #passthrough:
        if [ $# -gt 1 ];then
          $wgit $@
          return $?
        fi
        url=$($wgit config --get svn-remote.svn.url)
        #git-svn repo?
        if [ -z "${url}" ];then
          branch=$($wgit rev-parse --abbrev-ref HEAD)
          $wgit push origin $branch --tags --force-with-lease
          return $?
        else
          $wgit svn dcommit
          return $?
        fi
      ;;
    pull) ##reasonable default pull
        #passthrough:
        if [ $# -gt 1 ];then
          $wgit $@
          return $?
        fi
        url=$($wgit config --get svn-remote.svn.url)
        #git-svn repo?
        if [ -z "${url}" ];then
          branch=$($wgit rev-parse --abbrev-ref HEAD)
          $wgit pull origin $branch --tags
          return $?
        else
          $wgit svn rebase
          return $?
        fi
      ;;
    wash) ##pull and push
        git pull
        if [[ "$?" -gt 0 ]];then
          echo -e "\033[33merror pulling\033[0m"
          return 1
        elif [[ -n "$($wgit status --porcelain)" ]];then
          echo -e "\033[33munmerged changes\033[0m"
          return 1
        else
          git push
          return $?
        fi
      ;;
    giff) ##show differences in order
        shift
        local IFS=$'\n'
        #removed --all because it showed other branches
        for line in $($wgit --no-pager log --oneline -- $@)
        do
          sha=${line%% *}
          echo -e "\033[33m${sha}\033[0m ${line#* }"
          $wgit --no-pager show --color ${sha} -- $@ | sed 's/^/  /'
        done | $wless -x2 -RS #eval $($wgit config --get core.pager)
      ;;
    tags) ##
        $wgit --no-pager log --tags --simplify-by-decoration --pretty="format:%ai %d"
      ;;
    retag) #[tag]#Delete and recreate tag both local and remote
        shift
        tag=$1
        if [ -z "${tag}" ];then
          git tags
          return $?
        fi
        $wgit tag -d ${tag}
        $wgit push origin :refs/tags/${tag}
        $wgit tag ${tag}
        $wgit push origin tag ${tag}
      ;;
    peek) #[branch] [file]#Look at other branches without switching
        shift
        branch=$1
        shift
        file=$1
        shift
        if [ -z "${branch}" ];then
          gitex co
          return $?
        fi
        if [ -z "${file}" ];then
          $wgit diff HEAD..${branch} --name-only
          return $?
        else
          $wgit show ${branch}:${file}
          return $?
        fi
      ;;
    generate|gen) #[files]#generate a consolidated diff
        shift
        local branch=$($wgit rev-parse --abbrev-ref HEAD)
        local repo=$(basename $($wgit rev-parse --show-toplevel 2>/dev/null) 2>/dev/null)
        local tmp=/tmp/${repo}_${branch}
        mkdir -p ${tmp} 2>/dev/null
        trap "rm -rf ${tmp} 2>/dev/null" SIGHUP SIGINT SIGTERM RETURN

        local log=${tmp}/log
        local commits=${tmp}/commits
        local fork=${USER}_$(date +%F_%H-%M)
        local diff=~/Desktop/${repo}.diff #_${fork}_${branch}.diff

        echo -e "\033[33mfinding commits...\033[0m"
        $wgit --no-pager log --author=$USER --no-merges --oneline $@ > ${log}

        echo -e "\033[33mdelete lines you don't want (dd)...\033[0m"
        vi ${log}

        read -p "Are you sure you want this patch? (y/n) [y]" answer
        case "${answer}" in
          yes|y|'')
              echo -e "yes: generating diff"
            ;;
          no|n|*)
              echo -e "no: exiting"
              return
            ;;
        esac

        tac ${log} | grep -Eo '^[^ ][^ ]*' > $commits
        local start=$(head -n 1 $commits)

        echo -e "\033[33mfork branch $fork from $start^\033[0m"
        $wgit checkout -b $fork $start^

        for commit in $(cat $commits)
        do
          echo -e "  \033[32m${commit}\033[0m"
          $wgit cherry-pick -n $commit -Xtheirs $@
        done

        $wgit --no-pager diff -U10000 --cached > $diff
        echo -e "\033[32mPatch output to: \033[0m ${diff}"

        echo -e "\033[33mcleaning up\033[0m"
        $wgit reset --hard HEAD
        $wgit checkout $branch
        $wgit branch -D $fork
      ;;
    versions|ver) #[file] [filter]#show whole file revisions in order, optionally filtered
        shift
        if [ -n "$1" ];then
          file=$1
          shift
          filter=$1
          local IFS=$'\n'
          for line in $($wgit --no-pager log --oneline ${file})
          do
            sha=${line%% *}
            echo -e "\033[33m${sha}\033[0m ${line#* }"
            if [ -n "${filter}" ];then
              $wgit --no-pager show --color ${sha}:$file | grep -E "${filter}" | sed 's/^/  /'
            else
              $wgit --no-pager show --color ${sha}:$file | sed 's/^/  /'
            fi
          done | $wless -x2 -S #eval $($wgit config --get core.pager)
        else
          echo -e "\033[31mNo file specified\033[0m"
          return 1
        fi
      ;;
    glog) ##grep the log commit messages
        shift
        if [ -z "$@" ];then
          $wgit --no-pager log --oneline
        else
          $wgit --no-pager log --oneline --grep "$@"
        fi
      ;;
    sub|tree) ##simplified subtree actions
        shift
        gitex_subtree $@
      ;;
    flush|force) ##force push to origin with tags
        local branch=$($wgit rev-parse --abbrev-ref HEAD)
        $wgit push origin --force +${branch} --tags
      ;;
    res) #[sha]#List/Restore deleted files
        shift
        if [ -z "${1}" ];then
          $wgit --no-pager log --diff-filter=D --oneline --summary
        else
          while [ -n "$1" ]; do
            $wgit checkout ${1}^ -- $($wgit --no-pager log $1 --diff-filter=D --oneline --summary | grep "delete mode " | cut -d' ' -f5- | tr $'\n' ' ')
            shift
          done
        fi
      ;;
    ignore|follow) #[file|pattern]#Ignore untracked files or assume unchanged tracked files
        gitex_ignore $@
      ;;
    amend) #[sha]#amend an old commit message
        shift
        local sha=$1
        shift
        message=$@

        local branch=$($wgit rev-parse --abbrev-ref HEAD)

        set -e
        trap "echo -e '\033[31mERROR:\033[0m something went wrong, returning early.';return 1" ERR

        local old=$($wgit --no-pager show -s --pretty=format:"%h %s" ${sha})
        local mini=${old%% *}
        local old=${old##$mini }

        $wgit checkout -b amend ${sha} >/dev/null 2>&1
        $wgit commit --amend -m "${message}" >/dev/null
        $wgit rebase amend $branch >/dev/null 2>&1
        $wgit branch -d amend >/dev/null

        echo -e "\033[33m${mini}\033[0m"
        echo -e "  \033[31m-${old}\033[0m"
        echo -e "  \033[32m+${message}\033[0m"

        set +e
        trap - ERR
      ;;
    tmm) #[dest]#time machine move
        shift

        local path=$1
        shift
        $wgit filter-branch --index-filter '
          git ls-files -s \
            | sed "s~	\"*~&'${path}'/~" \
            | GIT_INDEX_FILE=$GIT_INDEX_FILE.new \
              git update-index --index-info && \
          mv "$GIT_INDEX_FILE.new" "$GIT_INDEX_FILE"
        ' HEAD
        #Use literal \t because of escaping issues
      ;;
    @(${actions}))
        export GITEX_BRANCH=$(set +e;$wgit rev-parse --abbrev-ref HEAD 2>/dev/null;set -e)
        gitex_action $@
      ;;
    context|ctx|go) #[$context|$repo|$action]#context handling
        shift
        gitex_context $@
      ;;
    top|up) ##cd to toplevel
        cd $($wgit rev-parse --show-toplevel)
      ;;
    tut) ##open tutorial in $EDITOR
        ${EDITOR-geany} ${RESOURCES}/git/usage.sh
      ;;
    rev) #[path|file]#revert file(s) to HEAD
        shift
        $wgit checkout -- $@
      ;;
    svn) ##git-svn extras
        shift
        gitex_svn $@
      ;;
    *|'')
        $wgit "$@"
      ;;
  esac
}

##Group Actions:
function gitex_action() {
  local ACTION=$1
  shift
  if [[ -n "$@" && -f "$@" ]];then
    local args=$(<$@)
  else
    local args=$@
  fi
  local OWD=$OLDPWD
  local start=$(pwd)

  for repo in $(echo ${!current})
  do
    set -a
    repo=${repo//\~/$HOME}
    cd ${repo}
    repo=${repo##*/}
    local toplevel=$($wgit rev-parse --show-toplevel 2>/dev/null)
    local branch=$($wgit rev-parse --abbrev-ref HEAD)

    local dirty=''
    if [ -n "$($wgit status --porcelain)" ]; then
      local dirty='*'
    fi
    local output="\033[34;1m${repo}\033[0m \033[32;1m$branch\033[36m$dirty\033[0m"

    set +a
    ARGS=$(echo "${args}" | sed 's/"/\\\"/g;s/.*/echo "&"/e')

    case "${ACTION}" in
      list) ##list repos and branches in current context
          echo -e "${output}"
        ;;
      stats) ##show status -s on repos in the current context
          echo -e "${output}"
          $wgit status -s
        ;;
      do) ##exec git on repos in the current context
          echo -e "${output}"
          eval "git $ARGS 2>&1"
          if [ "$?" -eq 130 ];then #SIGINT
            cd ${start}
            return
          fi
        ;;
      dob) ##exec git on repos in the current context of the same branch as the CWD
          if [ "$GITEX_BRANCH" == "$branch" ]; then
            echo -e "${output}"
            eval "git $ARGS 2>&1"
            if [ "$?" -eq 130 ];then #SIGINT
              cd ${start}
              return
            fi
          fi
        ;;
      mod) ##exec git on dirty repos in the current context
          if [ -n "$($wgit status --porcelain)" ]; then
            echo -e "${output}"
            if [ -z "${ARGS}" ];then
              git modified
              continue
            fi
            eval "git $ARGS 2>&1"
            if [ "$?" -eq 130 ];then #SIGINT
              cd ${start}
              return
            fi
          fi
        ;;
      mob) ##exec git on dirty repos in the current context of the same branch as the CWD
          if [[ "$GITEX_BRANCH" == "$branch" && -n "$($wgit status --porcelain)" ]]; then
            echo -e "${output}"
            eval "git $ARGS 2>&1"
            if [ "$?" -eq 130 ];then #SIGINT
              cd ${start}
              return
            fi
          fi
        ;;
      with) #[file|args]#eval on repos in the current context
          echo -e "${output}"
          eval "$ARGS"
          if [ "$?" -eq 130 ];then #SIGINT
            cd ${start}
            return
          fi
        ;;
      *)
        echo -e "\033[31mInvalid action:\033[0m ${ACTION}"
        cd $start
        OLDPWD=$OWD
        return 1
        ;;
    esac
  done
  cd $start
  OLDPWD=$OWD
}
##  Variables (any others must be escaped):
# $repo) ##
# $branch) ##
# $toplevel) ##

function gitex_add_repo_to_context() {
  set +e
  local repo=$1
  local OWD=$OLDPWD
  cd ${repo}
  if [[ "$?" -ne 0 ]];then
    return
  fi
  repo=$(basename $($wgit rev-parse --show-toplevel 2>/dev/null) 2>/dev/null)
  if [[ "$?" -eq 0 ]];then
    if grep -q "/${repo}\$" <<< "${repos}";then
      echo -e "\033[31mskipping\033[0m adding \033[34;1m${repo}\033[0m"
    else
      echo -e "\033[32madding\033[0m \033[34;1m${repo}\033[0m"
      #pwd only works here because git runs extensions from the top level
      repos="${repos}
$(pwd)"
      export ${current}="${repos}"
    fi
  else
    echo -e "\033[31minvalid repo\033[0m ${1}"
  fi
  cd - >/dev/null
  OLDPWD=$OWD
}

function gitex_remove_repo_from_context() {
  set +e
  local repo=$1
  local OWD=$OLDPWD
  cd ${repo} 2>/dev/null
  if [[ "$?" -eq 0 ]];then
    repo=$(basename $($wgit rev-parse --show-toplevel 2>/dev/null) 2>/dev/null)
  fi
  if [[ "$?" -eq 0 ]];then
    echo -e "\033[32mremoving\033[0m \033[34;1m${repo}\033[0m"
    repos=$(sed "/\/${repo}$/d" <<< "${repos}")
    export ${current}="${repos}"
  else
    echo -e "\033[31minvalid repo\033[0m ${1}"
  fi
  cd - >/dev/null
  OLDPWD=$OWD
}

##Context Actions (context|ctx|go):
function gitex_context()
{
  if [ $# -lt 1 ]; then
    local action='list'
  else
    local action=$1
    shift
  fi

  contexts=()
  contexts="$(grep -E '="$' ${GITEX_CONFIG} | sed 's/="$//')"
  context=$(echo "${contexts}" | tr $'\n' '|')
  repos=$(echo "${!current}" | sed '/^$/d')
  repo=$(echo "$repos" | sed 's/^.*\///' | tr $'\n' '|')

  case "$action" in
    list|get) ##list contexts (default)
        for ctx in ${contexts}
        do
          if [ "$ctx" == "$current" ];then
            echo -e "\033[32m${ctx}\033[36m*\033[0m"
          else
            echo -e "\033[32m${ctx}\033[0m"
          fi
        done
        return
      ;;
    new) #[name]#create and use new context
        current="$1"
        shift
        contexts="${contexts}
${current}"
        declare ${current}="
"
        echo -e "\033[33mcreated and using\033[0m \033[32m${current}\033[0m"
      ;;
    set|use) #[context]#switch to context
        current="$1"
        shift
        echo -e "\033[33musing\033[0m \033[32m${current}\033[0m"
      ;;
    add) #[path]#add repo to current context
        if [ -n "$1" ];then
          while [ -n "$1" ]
          do
            gitex_add_repo_to_context $1
            shift
          done
        else
          gitex_add_repo_to_context $(pwd)
        fi
        declare ${current}="${repos}"
      ;;
    remove|rm) #[repo]#delete repo from current context
        if [ -n "$1" ];then
          while [ -n "$1" ]
          do
            gitex_remove_repo_from_context $1
            shift
          done
        else
          gitex_remove_repo_from_context $(pwd)
        fi
      ;;
    bak|backup) ##backup the current context configs in ~/.git-extend
        local dest=${GITEX_CONFIG}-$(date +"%F")
        cp -f ${GITEX_CONFIG} ${dest}
        echo -e "\033[32mBacked up:\033[0m ~/${GITEX_CONFIG##*${USER}/} ~/${dest##*${USER}/}"
        return
      ;;
    @(${context})) #[context]#switch to using this context
        current="$action"
        echo -e "\033[33musing\033[0m \033[32m${current}\033[0m"
      ;;
    @(${repo})) #[repo]#cd to this repo
        repo=$(grep -Em 1 "/${action}$" <<< "${repos}")
        echo -e "\033[33mentering\033[0m \033[32m${action}\033[0m"
        cd ${repo//\~/$HOME}
        return
      ;;
    *)
        echo -e "\033[31mInvalid context action:\033[0m $1"
        return 1
      ;;
  esac
  
  echo "current=\"${current}\"" > ${GITEX_CONFIG}
  for ctx in ${contexts}
  do
    echo "${ctx}=\"
$(echo "${!ctx}" | sed '/^$/d')
\"" >> ${GITEX_CONFIG}
  done
  echo "" >> ${GITEX_CONFIG}
}

##Subtree Actions (sub|tree):
function gitex_subtree()
{
  if [ $# -lt 1 ]; then
    local action='list'
  else
    local action=$1
    shift
  fi

  local OWD=$OLDPWD
  local repo=$($wgit rev-parse --show-toplevel 2>/dev/null)
  cd ${repo}
  local GITEX_SUBTREE=${repo}/.git-subtree

  case "$action" in
    list|get) ##list subtrees (default)
        for line in $(cat ${GITEX_SUBTREE} 2>/dev/null)
        do
          local name=${line%%=*}
          local repo=${line#*=}
          local repo=${repo%,*}
          local branch=${line##*,}
          echo -e "\033[34;1m${name##*/}\033[0m ${repo} \033[32;1m${branch}\033[0m"
        done
      ;;
    add) ##add a subtree repo
        trap "echo 'Usage: git [sub|tree] add [url] [path within repo] [branch]';return 1" ERR
        local url=$1
        shift
        local path=$1
        shift
        local branch=${1:-master}
        shift
        trap - ERR
        git subtree add -P ${path} ${url} ${branch} --squash
        echo "${path}=${url},${branch}" >> ${GITEX_SUBTREE}
      ;;
    remove) #[repo]#remove subtree repo
        sed -i "/$1=/d" ${GITEX_SUBTREE}
      ;;
    pull|update) #[repo|all]#update the named subtree, or all (default)
        case "${1}" in
          all|"")
              for line in $(cat ${GITEX_SUBTREE})
              do
                local name=${line%%=*}
                git sub update "${name##*/}"
              done
            ;;
          *)
              local line=$(grep "$1=" ${GITEX_SUBTREE})
              local name=${line%%=*}
              local repo=${line#*=}
              local repo=${repo%,*}
              local branch=${line##*,}
              echo -e "updating \033[34;1m${name##*/}\033[0m ${repo} \033[32;1m${branch}\033[0m"
              git subtree pull --prefix ${name} "${repo}" "${branch}" --squash
            ;;
        esac
      ;;
    *)
        echo -e "\033[31mInvalid subtree action:\033[0m $1"
        cd - >/dev/null
        OLDPWD=$OWD
        return 1
      ;;
  esac

  cd - >/dev/null
  OLDPWD=$OWD
}

##Ignore Actions:
function gitex_ignore()
{
  local action=$1
  shift
  if [ -z "${1}" ]; then
    local action=''
  fi

  while
    local pattern=${1}
    case "${action}" in
      '') ##list ignored (default)
          echo -e "\033[32massume-unchanged\033[0m"
          git -C ${TOPLEVEL} ls-files -v | sed -n '/^[a-z] / s//  /p'
          echo -e "\033[32mgitignore\033[0m"
          for gitignore in $(WHERE=${TOPLEVEL} search .gitignore)
          do
            echo -e "  \033[34m${gitignore}\033[0m"
            cat ${TOPLEVEL}/${gitignore} | sed 's/^/      /'
          done
        ;;
      ignore) #[file|pattern]#add to ignore/unfollow
          $wgit ls-files --error-unmatch "${pattern}" >/dev/null 2>&1
          if [ $? -eq 0 ];then #tracked
            git -C ${TOPLEVEL} update-index --assume-unchanged ${pattern}
          else #not tracked
            append .gitignore "${pattern}"
          fi
        ;;
      follow) #[file|pattern]#remove from ignore or follow
          $wgit ls-files --error-unmatch "${pattern}" >/dev/null 2>&1
          if [ $? -eq 0 ];then #tracked
            git -C ${TOPLEVEL} update-index --no-assume-unchanged ${pattern}
          else #not tracked
            rmline .gitignore "${pattern}"
          fi
        ;;
    esac
    shift
    [ -n "$1" ]
  do
    continue
  done
}

function gitex_svn_migrate()
{
  local url=$1

  cd ${tmp}
  svn log --stop-on-copy ${url} | egrep "^(r[0-9]+|Create .* branch from .* branch)" | tail -2 > ${tmp}/data
  local revision=$(head -n 1 ${tmp}/data | cut -d' ' -f1)
  local revision=${revision#r}
  local branch=$(echo $url | grep -Po 'branches/[^/]*')
  local branch=${branch#branches/}
  local previous_branch=$(grep "Create" ${tmp}/data | cut -d' ' -f5)
  local previous_url=${url/branches\/${branch}/branches\/${previous_branch}}
  local base=${url##*/}

  echo -e "\033[32mclone r${revision} on ${branch}\033[0m"
  $wgit svn clone -r ${revision} "${url}"
  mv ${base} ${base}-${branch}
  echo ${base}-${branch} >> ${tmp}/branches
  cd ${base}-${branch}
  $wgit svn fetch | sed 's/^/  /'
  $wgit svn rebase -l | sed 's/^/  /'

  if [ -z "${previous_branch}" ];then
    echo -e "\033[32mlast branch reached\033[0m"
    return
  fi

  echo -e "\033[32mnext: ${previous_branch} on ${previous_url}\033[0m"
  gitex_svn_migrate "${previous_url}"
}


##SVN Actions:
function gitex_svn()
{
  case "$1" in
    co) #[branch]#Checkout remote branch and track
        trap "echo 'Usage: git svn co [branch]';return 1" ERR
        shift
        local branch=$1
        shift
        trap - ERR

        repo=$($wgit rev-parse --show-toplevel 2>/dev/null)
        url=$($wgit config --get svn-remote.svn.url)

        revision=$(svn log --stop-on-copy ${url}/${repo##*/}/branches/${branch} | egrep "r[0-9]+" | head -1 | cut -d' ' -f1)
        echo -e "\033[32mFetching ${branch} from ${revision}\033[0m"
        git svn fetch -r ${revision#r} #${url}/${repo##*/}

        git branch ${branch} origin/${branch}
        git checkout ${branch}
      ;;
    migrate) #[svn://branches/name/subdir]#Cross-branch clone sub-directory with history
        trap "echo 'Usage: git svn migrate [url]';return 1" ERR
        shift
        local url=$1
        shift
        trap - ERR

        local OWD=$OLDPWD
        local start=$PWD

        tmpdir
        #tmpsave #just in case

        local base=${url##*/}
        gitex_svn_migrate ${url}

        local earliest=$(tail -n1 ${tmp}/branches)
        echo -e "\033[32mCombine histories\033[0m into ${earliest}"
        cd ${tmp}/${earliest}
        for repo in $(head -n-1 ${tmp}/branches | tac)
        do
          echo -e "  \033[32m${repo}\033[0m:"
          $wgit remote add -f ${repo} ${tmp}/${repo} 2>&1 | sed 's/^/    /'
          $wgit pull --allow-unrelated-histories -Xtheirs ${repo} master 2>&1 | sed 's/^/    /'
          $wgit status | grep -q 'both added:'
          if [ $? -eq 0 ];then
            for file in $($wgit status | grep 'both added:' | sed 's/^\s*both added:\s*//')
            do
              $wgit add $file
            done
            git commit -m "fixed merge"
          fi
        done
        mv -v ${tmp}/${earliest} ${start}/${base}
        #cp -rv ${tmp}/${earliest} ${start}/${base}
        echo -e "\033[32mDONE: ${base}\033[0m"

        cd $start
        OLDPWD=$OWD
      ;;
    push) ##alias to dcommit
        $wgit svn dcommit
      ;;
    pull) ##alias to rebase
        $wgit svn rebase
      ;;
    *) ##git-svn
        $wgit svn "$@"
      ;;
  esac
}

function git() {
  if tty -s <&1; then
    source $BASH_SOURCE #keep gitex sourced for fast dev
  fi
  gitex "$@"
}

function config() {
  wgit="git --git-dir=${HOME}/.cfg/ --work-tree=${HOME}" gitex "$@"
}
