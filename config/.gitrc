#!/bin/bash

export GIT_MERGE_AUTOEDIT=no
export GITEX_CONFIG=~/.git-extend
export wgit=$(which git) #wrapped git
shopt -s extglob

#----------------------------------COMPLETIONS-----------------------------------#
#~ function gitex_complete() {
  #~ case "${#COMP_WORDS[@]}" in
    #~ 1)
        #~ COMPREPLY=($(compgen -W "$($wgit help -a)" -- "${COMP_WORDS[1]}"))
      #~ ;;
  #~ esac
  #~ return
  

  #~ local IFS=$'\n'
  #~ local suggestions=($(compgen -W "$(fc -l -50 | sed 's/\t//')" -- "${COMP_WORDS[1]}"))

  #~ if [ "${#suggestions[@]}" == "1" ]; then
    #~ local number="${suggestions[0]/%\ */}"
    #~ COMPREPLY=("$number")
  #~ else
    #~ for i in "${!suggestions[@]}"; do
      #~ suggestions[$i]="$(printf '%*s' "-$COLUMNS"  "${suggestions[$i]}")"
    #~ done

    #~ COMPREPLY=("${suggestions[@]}")
  #~ fi
#~ }
#~ complete -F gitex_complete git

#----------------------------------FUNCTIONS-----------------------------------#
function bash_prompt()
{
  branch=$($wgit rev-parse --abbrev-ref HEAD 2>/dev/null)
  dirty=''
  if [ -n "$($wgit status --porcelain 2>/dev/null)" ]; then
    dirty='*'
  fi
  PS1="\w \[\033[32m\]$branch\[\033[36m\]$dirty\[\033[0m\]\$ "
}
PROMPT_COMMAND=bash_prompt

##Main:
function gitex() {
  #------------------------------------SETUP-------------------------------------#

  if [ -f ${GITEX_CONFIG} ];then
    source ${GITEX_CONFIG}
  else
    echo -e "\033[33mgitex first run...\033[0m"

    echo "  set pager, changing tab length"
      $wgit config --global core.pager 'less -x2'

    echo "  allow simple push/pull"
      $wgit config --global push.default simple # tracking ?

    echo "  setup colors..."
      $wgit config --global color.diff auto
      $wgit config --global color.branch auto
      $wgit config --global color.status auto

      $wgit config --global color.branch.current "yellow reverse"
      $wgit config --global color.branch.local yellow
      $wgit config --global color.branch.remote green

      $wgit config --global color.diff.whitespace "red reverse"

      $wgit config --global color.status.added yellow
      $wgit config --global color.status.changed green
      $wgit config --global color.status.untracked cyan

    #echo "  setup aliases..."

    touch ${GITEX_CONFIG}
    echo -e "\033[32mDONE\033[0m"
  fi

  #------------------------------------MAIN--------------------------------------#
  actions=$(sed -n "/^##Group Actions:\$/,/^\}\$/ p" $BASH_SOURCE | grep -Eo '[^ (]+\)\s+#.*$' | sed 's/).*$//' | tr $'\n' '|')

  case "$1" in
    help)
        $wgit $@
        if [ $# -gt 1 ];then
          return
        fi
        echo ""
        git ex
      ;;
    ex) #print this usage information
        echo -e "\033[1mExtended Git Usage:\033[0m git [\033[34;1mactions\033[0m]"

        grep -Eo '^##.*$' $BASH_SOURCE |
        while read section
        do
          echo ""
          echo -e "  \033[1m${section#\#\#}\033[0m"
          sed -n "/^${section}\$/,/^\}\$/ p" $BASH_SOURCE | grep -Eo '[^ (]+\)\s+#.*$' | \
          while read help
          do
            printf "    \033[34;1m%-15s\033[0m %s\n" "${help%%)*#*}" "${help#*#}"
          done
        done
        echo ""
      ;;
    modified) #open dirty files in $EDITOR
        dir=$(pwd)
        local IFS=$'\n'
        files=$($wgit status -s)
        for file in $files
        do
          $EDITOR $dir/${file##* }
        done
      ;;
    wash) #pull and push
        branch=$($wgit rev-parse --abbrev-ref HEAD)
        $wgit pull origin $branch
        if [ -n "$($wgit status --porcelain)" ];then
          echo -e "\033[33munmerged changes\033[0m"
        else
          $wgit push origin $branch
        fi
      ;;
    glog) #grep the log commit messages
        shift
        if [ -z "$@" ];then
          $wgit --no-pager log --oneline
        else
          $wgit --no-pager log --oneline --grep "$@"
        fi
      ;;
    @(${actions}))
        export GITEX_BRANCH=$(set +e;$wgit rev-parse --abbrev-ref HEAD 2>/dev/null;set -e)
        gitex_action $@
      ;;
    context|ctx|go) #context handling
        shift
        gitex_context $@
      ;;
    tut) #open tutorial in $EDITOR
        $EDITOR ~/projects/resources/git/usage.sh
      ;;
    rev) #revert file(s) to HEAD
        shift
        $wgit checkout -- $@
      ;;
    svn)
        shift
        gitex_svn $@
      ;;
    *|'')
        $wgit "$@"
      ;;
  esac
}

##Group Actions:
function gitex_action() {
  local ACTION=$1
  shift
  local ARGS=$@

  for repo in $(echo ${!current})
  do
    repo=${repo//\~/$HOME}
    start=$(pwd)
    cd ${repo}
      repo=${repo##*/}
      local branch=$($wgit rev-parse --abbrev-ref HEAD)
      local dirty=''
      if [ -n "$($wgit status --porcelain)" ]; then
        local dirty='*'
      fi
      local output="\033[34;1m${repo}\033[0m \033[32;1m$branch\033[36m$dirty\033[0m"

      case "${ACTION}" in
        list) #list repos and branches in current context
            echo -e "${output}"
          ;;
        stats) #show status -s on repos in the current context
            echo -e "${output}"
            $wgit status -s
          ;;
        do) #exec git on repos in the current context
            echo -e "${output}"
            eval "git $ARGS 2>&1"
          ;;
        dob) #exec git on repos in the current context of the same branch as the CWD
            if [ "$BRANCH" == "$branch" ]; then
              echo -e "${output}"
              eval "git $ARGS 2>&1"
            fi
          ;;
        mod) #exec git on dirty repos in the current context
            if [ -n "$(git status --porcelain)" ]; then
              echo -e "${output}"
              eval "git $ARGS 2>&1"
            fi
          ;;
        mob) #exec git on dirty repos in the current context of the same branch as the CWD
            if [[ "$BRANCH" == "$branch" && -n "$(git status --porcelain)" ]]; then
              echo -e "${output}"
              eval "git $ARGS 2>&1"
            fi
          ;;
        with) #eval on repos in the current context replacing REPO
            echo -e "${output}"
            local ARGS=${ARGS//REPO/$repo}
            eval "$ARGS"
          ;;
        *)
          echo -e "\033[31mInvalid action:\033[0m ${ACTION}"
          return 1
          ;;
      esac
    cd $start
  done
}

function gitex_add_repo_to_context() {
  set +e
  local repo=$1
  OWD=$OLDPWD
  cd ${repo}
  repo=$(basename $($wgit rev-parse --show-toplevel 2>/dev/null) 2>/dev/null)
  if [[ "$?" -eq 0 ]];then
    if grep -q "/${repo}\$" <<< "${repos}";then
      echo -e "\033[31mskipping\033[0m adding \033[34;1m${repo}\033[0m"
    else
      echo -e "\033[32madding\033[0m \033[34;1m${repo}\033[0m"
      #pwd only works here because git runs extensions from the top level
      repos="${repos}
$(pwd)"
      export ${current}="${repos}"
    fi
  else
    echo -e "\033[31minvalid repo\033[0m ${1}"
  fi
  cd - >/dev/null
  OLDPWD=$OWD
}

function gitex_remove_repo_from_context() {
  set +e
  local repo=$1
  OWD=$OLDPWD
  cd ${repo}
  repo=$(basename $($wgit rev-parse --show-toplevel 2>/dev/null) 2>/dev/null)
  if [[ "$?" -eq 0 ]];then
    echo -e "\033[32mremoving\033[0m \033[34;1m${repo}\033[0m"
    repos=$(sed "/\/${repo}$/d" <<< "${repos}")
    export ${current}="${repos}"
  else
    echo -e "\033[31minvalid repo\033[0m ${1}"
  fi
  cd - >/dev/null
  OLDPWD=$OWD
}

##Context Actions (context|ctx|go):
function gitex_context()
{
  if [ $# -lt 1 ]; then
    local action='list'
  else
    local action=$1
    shift
  fi

  contexts=()
  contexts="$(grep -E '="$' ${GITEX_CONFIG} | sed 's/="$//')"
  context=$(echo "${contexts}" | tr $'\n' '|')
  repos=$(echo "${!current}" | sed '/^$/d')
  repo=$(echo "$repos" | sed 's/^.*\///' | tr $'\n' '|')

  case "$action" in
    list|get) #list contexts (default)
        for ctx in ${contexts}
        do
          if [ "$ctx" == "$current" ];then
            echo -e "\033[32m${ctx}\033[36m*\033[0m"
          else
            echo -e "\033[32m${ctx}\033[0m"
          fi
        done
        return
      ;;
    new) #create and use new context
        current="$1"
        shift
        contexts="${contexts}
${current}"
        declare ${current}="
"
        echo -e "\033[33mcreated and using\033[0m \033[32m${current}\033[0m"
      ;;
    set|use) #switch to context
        current="$1"
        shift
        echo -e "\033[33musing\033[0m \033[32m${current}\033[0m"
      ;;
    add) #add repo to current context
        if [ -n "$1" ];then
          while [ -n "$1" ]
          do
            gitex_add_repo_to_context $1
            shift
          done
        else
          gitex_add_repo_to_context $(pwd)
        fi
        declare ${current}="${repos}"
      ;;
    remove) #delete repo from current context
        if [ -n "$1" ];then
          while [ -n "$1" ]
          do
            gitex_remove_repo_from_context $1
            shift
          done
        else
          gitex_remove_repo_from_context $(pwd)
        fi
      ;;
    @(${context})) #switch to using this context
        current="$action"
        echo -e "\033[33musing\033[0m \033[32m${current}\033[0m"
      ;;
    @(${repo})) #cd to this repo
        repo=$(grep -Em 1 "${action}$" <<< "${repos}")
        echo -e "\033[33mentering\033[0m \033[32m${action}\033[0m"
        cd ${repo//\~/$HOME}
        return
      ;;
    *)
        echo -e "\033[31mInvalid context action:\033[0m $1"
        return 1
      ;;
  esac
  
  echo "current=\"${current}\"" > ${GITEX_CONFIG}
  for ctx in ${contexts}
  do
    echo "${ctx}=\"
$(echo "${!ctx}" | sed '/^$/d')
\"" >> ${GITEX_CONFIG}
  done
  echo "" >> ${GITEX_CONFIG}
}

##SVN Actions:
function gitex_svn()
{
  case "$1" in
    co) #Checkout remote branch and track
        shift
        local branch=$1
        shift
        repo=$($wgit rev-parse --show-toplevel 2>/dev/null)
        url=$($wgit config --get svn-remote.svn.url)

        OWD=$OLDPWD
        CWD=$PWD
        cd ${repo}/../

        revision=$(svn log --stop-on-copy ${url}/${repo##*/}/branches/${branch} | egrep "r[0-9]+" | tail -1 | cut -d' ' -f1)
        echo -e "\033[32mCloning ${branch} from ${revision}\033[0m"
        git svn clone -r ${revision#r} -s ${url}/${repo##*/}

        cd ${repo}
        git branch ${branch} origin/${branch}
        git checkout ${branch}

        cd $CWD >/dev/null
        OLDPWD=$OWD
      ;;
    push) #alias to dcommit
        $wgit svn dcommit
      ;;
    *) #git-svn
        $wgit svn "$@"
      ;;
  esac
}

function git() {
  if tty -s <&1; then
    source $BASH_SOURCE #keep gitex sourced for fast dev
  fi
  gitex "$@"
}