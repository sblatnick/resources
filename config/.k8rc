#!/bin/bash
#Kubernetes (k8s) helper scripts

export K8_CONFIG=~/.kate
export K8_PLUGINS=$(IFS=': '; ls -1 $PATH 2>/dev/null | grep kubectl- | sed 's/^kubectl-//' | sed 's/_/-/')
export K8_SUBCOMMANDS=$(kubectl -h 2>/dev/null | grep -o "^  [a-z][a-z]*" | sed 's/^  *//')
shopt -s expand_aliases extglob

#----------------------------------FUNCTIONS-----------------------------------#

function kate_set_namespace() {
  private

  echo "namespace=\"${1}\"" > ${K8_CONFIG}
  echo -e "namespace \033[34;1m${1}\033[0m";
}

function kate_containers() {
  namespace=$1
  pod=$2
  action=${3-noop}
  local found=0
  local where=''
  local IFS=$' '
  local JSON=$(kubectl -n ${namespace} get pod ${pod} -o=json)
  for container in $(kubectl -n ${namespace} get pod ${pod} -o=jsonpath="{.spec.initContainers[*].name}" 2>/dev/null)
  do
    local state=$(echo ${JSON} | jq -r ".status.initContainerStatuses[] | select(.name == \"${container}\") | [.state | keys[]] | @tsv" 2>/dev/null)
    [[ ${action} != 'do' ]] && printf "  \033[36;1m%-10s\033[0m %s\n" "${container}" "${state}"
    if [[ "${state}" == "running" ]];then
      ((found++))
      where=${container}
    fi
  done
  for container in $(kubectl -n ${namespace} get pod ${pod} -o=jsonpath="{.spec.containers[*].name}" 2>/dev/null)
  do
    local state=$(echo ${JSON} | jq -r ".status.containerStatuses[] | select(.name == \"${container}\") | [.state | keys[]] | @tsv" 2>/dev/null)
    [[ ${action} != 'do' ]] && printf "  \033[34;1m%-10s\033[0m %s\n" "${container}" "${state}"
    if [[ "${state}" == "running" ]];then
      ((found++))
      where=${container}
    fi
  done
  if [[ ${action} != 'noop' && ${found} -eq 1 ]];then
    if [[ ${action} == 'do' ]];then
      shift 3
      kate_do "${namespace}" "${pod}" "${where}" $@
    else
      echo "Connecting to ${pod} ${where}"
      kate_go "${action}" "${namespace}" "${pod}" "${where}"
    fi
  fi
}

function kate_go() {
  local action=$1
  local namespace=$2
  local pod=$3
  local container=$4
  local shell=${5:-bash}

  case "${action}" in
    su|sugo)
        kubectl exec_as -n ${namespace} -u root -c ${container} ${pod} -- /bin/${shell}
      ;;
    log)
        kubectl -n ${namespace} logs -c ${container} ${pod} --follow
      ;;
    go|*)
        kubectl -n ${namespace} exec -it -c ${container} ${pod} -- /bin/${shell}
      ;;
  esac
}

function kate_do() {
  local namespace=$1
  local pod=$2
  local container=$3
  shift 3

  kubectl -n ${namespace} exec -it -c ${container} ${pod} -- /bin/bash -c $@
}

#----------------------------------COMPLETIONS-----------------------------------#
function kate_complete() {
  COMPREPLY=()
  case "${COMP_CWORD}" in
    1)
        #kubectl:
        COMPREPLY+=($(compgen -W "${K8_SUBCOMMANDS}" -- "${COMP_WORDS[1]}"))
        #kubectl plugins:
        COMPREPLY+=($(compgen -W "${K8_PLUGINS}" -- "${COMP_WORDS[1]}"))
        #contexts:
        COMPREPLY+=($(compgen -W "$(kubectl config get-contexts -o=name)" -- "${COMP_WORDS[1]}"))
        #namespaces:
        COMPREPLY+=($(compgen -W "$(kubectl get namespace -o name | sed 's/namespace\///')" -- "${COMP_WORDS[1]}"))

        complete_sections ${BASH_SOURCE}
      ;;
    2)
        context=$(kubectl config current-context)

        case "${COMP_WORDS[1]}" in
          "${context}")
              COMPREPLY+=($(compgen -W "$(kubectl get namespace -o name | sed 's/namespace\///')" -- "${COMP_WORDS[2]}"))
            ;;
          go)
              COMPREPLY+=($(compgen -W "$(kubectl -n ${namespace} get pod -o=name | sed 's~^pod/~~')" -- "${COMP_WORDS[2]}"))
            ;;
          *)
              complete_pwd
            ;;
        esac

        #complete_section "${section}" ${BASH_SOURCE}
      ;;
    *)
        complete_pwd
      ;;
  esac
}
complete -o nospace -F kate_complete kate k8 kl kc k


##Main:
function kate_extentions() {
  private

  context=$(kubectl config current-context)
  if [ -z "${NS}" ];then
    source ${K8_CONFIG} 2>/dev/null #get current namespace
  else
    namespace=${NS}
  fi

  case "${1}" in
    '')
        local IFS='|'
        for ctx in $(kubectl config get-contexts -o=name | tr $'\n' '|')
        do
          if [ "$ctx" == "$context" ];then
            echo -e "\033[33;1m${ctx}\033[0m"
            kubectl get namespace -o name 2>/dev/null | sed 's/namespace\///' |
            while read ns
            do
              if [ "$ns" == "$namespace" ];then
                echo -e "  \033[36;1m${ns}\033[0m"
              else
                echo -e "  \033[34;1m${ns}\033[0m"
              fi
            done
          else
            echo -e "\033[32;1m${ctx}\033[0m"
          fi
        done
      ;;
    -*)
        kubectl -n ${namespace} $@
      ;;
    #command passthrough
    @($(echo -e "${K8_SUBCOMMANDS}" | tr $'\n' '|')))
        #tweaks:
        case "${1}" in
          get)
              kubectl -n ${namespace} $@ | grep -v '^pvc' #ignore openebs pods
            ;;
          *)
              kubectl -n ${namespace} $@
            ;;
        esac
      ;;
    @($(echo -e "${K8_PLUGINS}" | tr $'\n' '|')))
        #plugin passthrough
        kubectl $@
      ;;
    #Custom commands:
    tail) ##kubetail
        which kubetail >/dev/null 2>&1
        if [ "$?" -ne "0" ]; then
          echo -e "\033[31mkubetail not installed in path\033[0m git clone git@github.com:johanhaleby/kubetail.git"
          return
        fi
        kubetail $2 -z 1,2,3,4,16,17,18 -n ${namespace}
      ;;
    rm) ##Alias to delete
        shift
        kubectl -n ${namespace} delete $@
      ;;
    clean) ##Delete any unhealthy pods
        shift
        local IFS=$'\n'
        local pods=$(kubectl -n ${namespace} get pod)
        local wide=$(echo "${pods}" | maxlen)
        for pod in $pods
        do
          local stat=$(echo "${pod}" | col 3)
          case $stat in
            CrashLoopBackOff|Error|OOMKilled)
                local status=$(red "deleting...")
                local name=$(echo "${pod}" | col 1)
                kubectl -n ${namespace} delete pod/${name} --grace-period 0 --force
              ;;
          esac
          printf "%*s %b\n" -$wide "$pod" "$status"
        done
      ;;
    kill) ##Alias to delete --grace-period 0 --force
        shift
        kubectl -n ${namespace} delete $@ --grace-period 0 --force
      ;;
    killall) ##Alias to force delete all of object type
        shift
        kubectl -n ${namespace} delete $(kubectl -n ${namespace} get $@ -o=name) --grace-period 0 --force
      ;;
    ingress|net) ##Alias to follow nginx ingress controller logs
        shift
        kubectl -n nginx-ingress logs --tail 100 --follow $(kubectl -n nginx-ingress get pod -o=name | grep controller)
      ;;
    go|su|sugo|log) #[pod] [container]#List containers or attach/tail a specified container
        action=$1
        shift
        local IFS=$'\n'
        if [ $# -lt 1 ]; then
          #ignore openebs pvcs
          for pod in $(kubectl -n ${namespace} get pod -o=name | sed 's~^pod/~~' | grep -v 'pvc')
          do
            echo -e "\033[32;1m${pod}\033[0m"
            kate_containers "${namespace}" "${pod}"
          done
        elif [ $# -lt 2 ]; then
          kate_containers "${namespace}" "${1}" "${action}"
        else
          pod=$1
          shift
          container=$1
          shell=$2
          kate_go "${action}" "${namespace}" "${pod}" "${container}" "${shell}"
        fi
      ;;
    do) #[pod]#Run command on a specified pod
        action=$1
        shift
        local IFS=$'\n'
        if [ $# -lt 1 ]; then
          #ignore openebs pvcs
          for pod in $(kubectl -n ${namespace} get pod -o=name | sed 's~^pod/~~' | grep -v 'pvc')
          do
            echo -e "\033[32;1m${pod}\033[0m"
            kate_containers "${namespace}" "${pod}"
          done
        else
          pod=$1
          shift
          kate_containers "${namespace}" "${pod}" "${action}" $@
        fi
      ;;
    quick) #[image]#Enter shell for a temporary pod
        shift
        image=$1
        show kubectl -n ${namespace} run -it --rm --restart=Never --image ${image} tmp --command -- sh
        #Doesn't have any volumes
        #For that you either need `--overrides=json` or to create a pod using `kubectl apply -f spec.yaml`
        #Get a spec to start from using `kubectl get pod ${name} -o yaml` or `-o json`
        #Use to hold it open: `command: ["sh", "-c", "tail -f /dev/null"]`
      ;;
    cmd) #[image] [command]#Run a command in a temporary pod
        shift
        image=$1
        shift
        command=$@
        show kubectl -n ${namespace} run -it --rm --restart=Never --image ${image} tmp --command -- ${command}
      ;;
    ex) ##Print usage information
        document ${BASH_SOURCE}
        echo ""
      ;;
    help) ##Print usage information + help
        shift
        document ${BASH_SOURCE}
        echo ""
        kubectl help $@
      ;;
    *)
        #contexts
        kubectl config get-contexts $1 >/dev/null 2>&1
        if [ "$?" -ne "0" ]; then
          #namespaces
          kubectl get namespace $1 >/dev/null 2>&1
          if [ "$?" -ne "0" ]; then
            #passthrough (probably an error)
            #kubectl -n ${namespace} $@
            echo "namespace not found"
          else
            kate_set_namespace $1
          fi
        else #set context
          kubectl config use-context $1 >/dev/null 2>&1
          echo -en "Switching to context \033[32;1m${1}\033[0m ";
          if [ -z ${2} ]; then
            local namespace=$(kubectl config view --minify --output 'jsonpath={..namespace}')
            kate_set_namespace ${namespace:-default}
          else
            shift
            #namespaces
            kubectl get namespace $1 >/dev/null 2>&1
            if [ "$?" -ne "0" ]; then
              #passthrough (probably an error)
              kubectl -n ${namespace} $@
            else
              kate_set_namespace $1
            fi
          fi
        fi
      ;;
  esac
}

function kate() {
  if tty -s <&1; then
    source $BASH_SOURCE #keep dockerrc sourced for fast dev
  fi
  kate_extentions "$@"
}

#kubectl/kate less = KL
function kl() {
  kate $@ | less
}
#kubectl/kate watch = KW
function kw() {
  while [ $? ]
  do
    kate $@
  done
}
function ks() {
  kate get pod | grep "$1"
}
function kn() {
  kate get pod -o=name | grep "$1"
}

#kube control = KC
alias k='kate'
alias k8='kate'
alias kc='kate'

alias kd='k describe pod'
alias kg='k go'



