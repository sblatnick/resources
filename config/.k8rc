#!/bin/bash
#Kubernetes (k8s) helper scripts

export K8_CONFIG=~/.kate
export K8_PLUGINS=$(IFS=': '; ls -1 $PATH 2>/dev/null | grep kubectl- | sed 's/^kubectl-//')
export K8_SUBCOMMANDS=$(kubectl -h 2>/dev/null | grep -o "^  [a-z][a-z]*" | sed 's/^  *//')
shopt -s extglob

#----------------------------------FUNCTIONS-----------------------------------#

function kate_set_namespace() {
  private

  echo "namespace=\"${1}\"" > ${K8_CONFIG}
  echo -e "namespace \033[34;1m${1}\033[0m";
}

function kate_containers() {
  namespace=$1
  pod=$2
  for container in $(kubectl -n ${namespace} get pod ${pod} -o=jsonpath="{.spec.initContainers[*].name}" 2>/dev/null)
  do
    echo -e "  \033[36;1m${container}\033[0m"
  done
  for container in $(kubectl -n ${namespace} get pod ${pod} -o=jsonpath="{.spec.containers[*].name}")
  do
    echo -e "  \033[34;1m${container}\033[0m"
  done
}

#----------------------------------COMPLETIONS-----------------------------------#
function kate_complete() {
  COMPREPLY=()
  case "${COMP_CWORD}" in
    1)
        #kubectl:
        COMPREPLY+=($(compgen -W "${K8_SUBCOMMANDS}" -- "${COMP_WORDS[1]}"))
        #kubectl plugins:
        COMPREPLY+=($(compgen -W "${K8_PLUGINS}" -- "${COMP_WORDS[1]}"))
        #contexts:
        COMPREPLY+=($(compgen -W "$(kubectl config get-contexts -o=name)" -- "${COMP_WORDS[1]}"))
        #namespaces:
        COMPREPLY+=($(compgen -W "$(kubectl get namespace -o name | sed 's/namespace\///')" -- "${COMP_WORDS[1]}"))

        complete_sections ${BASH_SOURCE}
      ;;
    2)
        context=$(kubectl config current-context)

        case "${COMP_WORDS[1]}" in
          "${context}")
              COMPREPLY+=($(compgen -W "$(kubectl get namespace -o name | sed 's/namespace\///')" -- "${COMP_WORDS[2]}"))
            ;;
          go)
              COMPREPLY+=($(compgen -W "$(kubectl -n ${namespace} get pod -o=name | sed 's~^pod/~~')" -- "${COMP_WORDS[2]}"))
            ;;
          *)
              complete_pwd
            ;;
        esac

        #complete_section "${section}" ${BASH_SOURCE}
      ;;
    *)
        complete_pwd
      ;;
  esac
}
complete -o nospace -F kate_complete kate k8 kl kc k


##Main:
function kate_extentions() {
  private

  context=$(kubectl config current-context)
  source ${K8_CONFIG} 2>/dev/null #get current namespace

  case "${1}" in
    '')
        IFS='|'
        for ctx in $(kubectl config get-contexts -o=name | tr $'\n' '|')
        do
          if [ "$ctx" == "$context" ];then
            echo -e "\033[33;1m${ctx}\033[0m"
            kubectl get namespace -o name | sed 's/namespace\///' |
            while read ns
            do
              if [ "$ns" == "$namespace" ];then
                echo -e "  \033[36;1m${ns}\033[0m"
              else
                echo -e "  \033[34;1m${ns}\033[0m"
              fi
            done
          else
            echo -e "\033[32;1m${ctx}\033[0m"
          fi
        done
      ;;
    -*)
        kubectl -n ${namespace} $@
      ;;
    @($(echo -e "${K8_SUBCOMMANDS}" | tr $'\n' '|')))
        #command passthrough
        kubectl -n ${namespace} $@
      ;;
    @($(echo -e "${K8_PLUGINS}" | tr $'\n' '|')))
        #plugin passthrough
        kubectl $@
      ;;
    #Custom commands:
    tail)
        which kubetail >/dev/null 2>&1
        if [ "$?" -ne "0" ]; then
          echo -e "\033[31mkubetail not installed in path\033[0m git clone git@github.com:johanhaleby/kubetail.git"
          return
        fi
        kubetail $2 -z 1,2,3,4,16,17,18 -n ${namespace}
      ;;
    rm) ##Alias to delete
        shift
        kubectl -n ${namespace} delete $@
      ;;
    kill) ##Alias to delete --grace-period 0 --force
        shift
        kubectl -n ${namespace} delete $@ --grace-period 0 --force
      ;;
    killall) ##Alias to force delete all of object type
        shift
        kubectl -n ${namespace} delete $(kubectl -n ${namespace} get $@ -o=name) --grace-period 0 --force
      ;;
    go|su|sugo) #[pod] [container]#List containers or attach to a specified container
        action=$1
        shift
        if [ $# -lt 1 ]; then
          for pod in $(kubectl -n ${namespace} get pod -o=name | sed 's~^pod/~~')
          do
            echo -e "\033[32;1m${pod}\033[0m"
            kate_containers "${namespace}" "${pod}"
          done
        elif [ $# -lt 2 ]; then
          kate_containers "${namespace}" "${1}"
        else
          pod=$1
          shift
          container=$1
          shell=$2
          case "${action}" in
            su|sugo)
                kubectl exec_as -n ${namespace} -u root -c ${container} ${pod} -- /bin/${shell:-bash}
              ;;
            go|*)
                kubectl -n ${namespace} exec -it -c ${container} ${pod} -- /bin/${shell:-bash}
              ;;
          esac
        fi
      ;;
    ex) ##Print usage information
        document ${BASH_SOURCE}
        echo ""
      ;;
    help) ##Print usage information + help
        shift
        document ${BASH_SOURCE}
        echo ""
        kubectl help $@
      ;;
    *)
        #contexts
        kubectl config get-contexts $1 >/dev/null 2>&1
        if [ "$?" -ne "0" ]; then
          #namespaces
          kubectl get namespace $1 >/dev/null 2>&1
          if [ "$?" -ne "0" ]; then
            #passthrough (probably an error)
            kubectl -n ${namespace} $@
          else
            kate_set_namespace $1
          fi
        else #set context
          kubectl config use-context $1 >/dev/null 2>&1
          echo -en "Switching to context \033[32;1m${1}\033[0m ";
          if [ -z ${2} ]; then
            kate_set_namespace default
          else
            shift
            #namespaces
            kubectl get namespace $1 >/dev/null 2>&1
            if [ "$?" -ne "0" ]; then
              #passthrough (probably an error)
              kubectl -n ${namespace} $@
            else
              kate_set_namespace $1
            fi
          fi
        fi
      ;;
  esac
}

function kate() {
  if tty -s <&1; then
    source $BASH_SOURCE #keep dockerrc sourced for fast dev
  fi
  kate_extentions "$@"
}

#kubectl/kate less = KL
function kl() {
  kate $@ | less
}
#kube control = KC
alias k='kate'
alias k8='kate'
alias kc='kate'





