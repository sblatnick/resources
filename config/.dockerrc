#!/bin/bash

export DOC_CONFIG=~/.dockerrc
use ${DOC_CONFIG}
shopt -s expand_aliases extglob
#DEBUG=true

#----------------------------------FUNCTIONS-----------------------------------#

function doc_ctx() {
  private
  sit 'current' "${1}" >/dev/null 2>&1
  path=$(sit contexts[current].path)
  echo -e "\033[33musing & entering\033[0m \033[32m${context}\033[0m (${path})"
  if [ "${path}" != "null" ];then
    cd ${path}
  fi
}
function docrc() {
  if [ "$#" -lt 1 ];then
    echo -e "Usage: docrc [key] [value]"
    return
  fi

  rc=$(sit contexts[current].path)/.dockerrc
  if [ ! -f ${rc} ];then
    echo '{ }' > ${rc}
  fi

  key=$1
  shift

  result=$(SIT_TMP=${rc} sit ${key} $@)
  if [ $? -gt 0 ];then
    return 1
  fi
  echo "${result}"
}

#----------------------------------COMPLETIONS-----------------------------------#
function doc_complete() {
  COMPREPLY=()
  case "${COMP_CWORD}" in
    1) #actions
        complete_sections ${BASH_SOURCE}
      ;;
    2) #targets
        section=''
        case "${COMP_WORDS[1]}" in
          context|ctx|go)
              section="##Context Actions (context|ctx|go):"
              #add contexts:
              COMPREPLY+=($(compgen -W "$(sit contexts)" -- "${COMP_WORDS[${COMP_CWORD}]}"))
            ;;
          img|build|make|run|push|pull|edit|new|list)
              #add image names:
              path=$(sit contexts[current].path)
              COMPREPLY+=($(compgen -W "$(ls -1 $path | sed 's/\.df//' | tr $'\n' ' ')" -- "${COMP_WORDS[${COMP_CWORD}]}"))
            ;;
          *)
              #add files/directories:
              complete_pwd
            ;;
        esac

        complete_section "${section}" ${BASH_SOURCE}
      ;;
    3)
        case "${COMP_WORDS[1]}" in
          context|ctx|go)
              case "${COMP_WORDS[2]}" in
                set|use)
                    #add contexts:
                    COMPREPLY+=($(compgen -W "$(sit contexts)" -- "${COMP_WORDS[${COMP_CWORD}]}"))
                  ;;
              esac
            ;;
          *)
              #add files/directories:
              complete_pwd
            ;;
        esac

      ;;
    *)
        #add files/directories:
        complete_pwd
      ;;
  esac
}
complete -o nospace -F doc_complete doc

##Main:
function docker_extentions() {
  private
  #------------------------------------SETUP-------------------------------------#

  if [[ "$(cat ${DOC_CONFIG})" == '{ }' ]];then
    context='me'
    echo -e "\033[33minitilize for first run...\033[0m"
    sit contexts.$context.path ${RESOURCES}/docker/images >/dev/null 2>&1
    sit 'current' "${context}" >/dev/null 2>&1
    echo -e "\033[32mDONE\033[0m"
  fi

  #load defaults
  context=$(sit 'current')
  repo=$(coalesce "$(docrc 'repo')" "$(sit 'repo')" '')
  user=$(coalesce "$(docrc 'user')" "$(sit 'user')" 'root')
  path=$(sit contexts[current].path)

  debug "context=${context}"
  debug "repo=${repo}"
  debug "user=${user}"
  debug "path=${path}"

  #------------------------------------MAIN--------------------------------------#
  action=$1
  shift
  target=${1%%:*}
  start=$2
  if [ -n "${target}" ];then
    version=${1/$target/}
    version=${version#:}
    version=${version:=latest}

    if [ -f ${path}/${target} ];then
      df=${path}/${target}
    elif [ -f ${path}/${target}.df ];then
      df=${path}/${target}.df
    elif [ -f ${path}/${target}/Dockerfile ];then
      df=${path}/${target}/Dockerfile
      path=${path}/${target}
    else
      df=${path}/${target}.df
    fi

    img=$(coalesce "$(docrc images.${target}.alias)" "${target}")
    stages=$(grep -E 'FROM .* AS .*' ${df} 2>/dev/null | sed -n 's/^.* AS //p')
    starget=''

    debug "target=${target}"
    debug "img=${img}"
    debug "version=${version}"
  fi

  case "$action" in
    help|'') ##print this usage information
        echo -e "\033[1mDocker Extentions:\033[0m doc [\033[34;1mactions\033[0m]"
        document ${BASH_SOURCE}
        echo ""
      ;;
    set) #[key] [value]#Set rc defaults such as: repo, user
        sit ${1} ${2}
      ;;
    sit) #[key] [value]#Set/Get rc for the current context (alias to docrc)
        docrc ${1} ${2}
      ;;
    edit|new) #[name]#open Dockerfile in current context, create new one if not present
        if [ -f ${df} ];then
          $EDITOR ${df}
        else
          cat > ${df} << EOF
FROM ${repo}centos:6
USER ${user-root}

RUN \\
  yum install -y yum-utils && \\
  yum install -y \\
    gcc \\
    autoconf \\
    automake \\
    libtool \\
    make && \\
  yum clean all

ENTRYPOINT /bin/bash
EOF
          $EDITOR ${df}
        fi
      ;;
    list) ##list Dockerfiles in current context
        echo "$(cd ${path} && ls -1 */Dockerfile *.df 2>/dev/null | sed 's/\.df//;s/\/Dockerfile//')"
      ;;
    img|build|make) #[name]#Create docker image
        if [ -f ${df} ];then
          buildargs=$(docrc images.${target}.buildarg | sed '/^$/d;s/^/--build-arg /')
          while read stage
          do
            if [ -n "${stage}" ];then
              if [[ -n "${start}" && "${stage}" != "${start}" ]];then
                continue
              fi
              echo -en "\033[32;1mSTAGE: ${stage}\033[0m "
              starget="--target ${stage}"
              target="${img}/${stage}"
            fi

            echo -e "\033[32mbuilding ${target}:${version} image\033[0m"
            eval docker build \
              ${starget} ${buildargs} -t ${repo}${img}:${version} \
              -f ${df} \
              ${path}/

          done < <(echo "${stages}")
        else
          echo -e "\033[33mERROR\033[0m: no such target: ${target}:${version}"
          return 1
        fi
      ;;
    run|dry|gui) #[application]#run a temporary container locally, running gui app, or display the command
        if [ -f ${df} ];then
          volumes=$(docrc images.${target}.volumes | sed "s/~/${HOME//\//\\/}/" | sed '/^$/d;s/^/-v /')
          cwd=$(docrc images.${target}.cwd)
        else
          volumes=""
          repo=""
        fi
        cwd=${cwd:-/root}
        display=''
        dry='show'
        after=''
        if [[ "${action}" == "dry" ]];then
          echo -e "\033[33mentering ${target}:${version}\033[0m (dry)"
          dry="echo"
        else
          if [[ "${action}" == "gui" ]];then
            if [ -n "${start}" ];then
              echo -e "\033[33mexecuting app \"${start}\" in ${target}:${version}\033[0m"
              start="-c \"${start}\"" #FIXME
            else
              echo -e "\033[33mentering ${target}:${version} with X11 forwarded\033[0m"
            fi
            display="-e DISPLAY=host.docker.internal:0"
            case "$(uname -s)" in
              Darwin)
                  xhost + 127.0.0.1
                  open -a XQuartz
                  socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\"$DISPLAY\" &
                ;;
            esac
            pid=$!
            after="kill $pid"
          else
            echo -e "\033[33mentering ${target}:${version}\033[0m"
          fi
        fi
        name=${target##*/}
        name=${name%%:*}
        $dry docker run \
          --privileged=true \
          -it \
          --rm ${volumes} \
          --entrypoint bash \
          -h ${name} \
          --name ${name} \
          -w ${cwd} \
          -P \
          ${display} \
          ${repo}${img}:${version} ${start}
        debug "docker run status: $?"
        #"--privileged=true" for loop devices and mounting an iso
        $after
      ;;
    pull|push) ##pull/push image to repo
        if [ -f ${df} ];then
          docker ${action} ${repo}${img}:${version}
        else
          echo -e "\033[33mERROR\033[0m: no such image: ${img}:${version}"
          return 1
        fi
      ;;
    clean) ##remove exited containers and dangling images
        docker rm -v $(docker ps -a -q -f status=exited)
        docker rmi $(docker images -q -f dangling=true)
      ;;
    cleanvol) ##remove dangling volumes (dangerous)
        docker volume rm $(docker volume ls -q -f dangling=true)
      ;;
    context|ctx|go) #[$context|$dockerfile|$action]#context handling
        doc_context $@
      ;;
    *)
        echo -e "\033[33mERROR\033[0m: invalid action ${action}"
      ;;
  esac
}

##Context Actions (context|ctx|go):
function doc_context()
{
  private
  if [ $# -lt 1 ]; then
    local action='list'
  else
    local action=$1
    shift
  fi

  contexts="$(sit contexts)"
  ctxs=$(echo $contexts | tr ' ' '|')

  case "$action" in
    list|get) ##list contexts (default)
        longest=$(maxlen $contexts)
        for ctx in $contexts
        do
          path=$(sit contexts.$ctx.path)
          home=${HOME//\//\\/}
          path=${path//$home/\~}
          pad=$((2 + longest - $(expr length ${ctx})))
          mark=' '
          if [ "$ctx" == "$context" ];then
            mark='*'
          fi
          printf "\033[32m%s\033[36m%*s\033[0m%s\n" "${ctx}" "-${pad}" "${mark}" "${path}"
        done
      ;;
    new|add) #[name] [path]#create and use new context
        context="$1"
        shift
        path=$1
        if [ -n "${path}" ];then
          local OWD=$OLDPWD
          cd ${path} 2>/dev/null
          if [ "$?" -eq 0 ];then
            path=$(pwd)
          else
            echo -e "\033[31minvalid path:\033[0m ${path}"
            return 1
          fi
          cd - >/dev/null
          OLDPWD=$OWD
        else
          path=$(pwd)
        fi
        sit contexts.$context.path $path >/dev/null 2>&1
        sit 'current' "${context}" >/dev/null 2>&1
        echo -e "\033[33mcreated and using\033[0m \033[32m${context}\033[0m(${path})"
      ;;
    set|use) #[context]#switch to context
        context="$1"
        shift
        doc_ctx "${context}"
      ;;
    @(${ctxs})) #[context]#switch to context
        context="${action}"
        doc_ctx "${context}"
      ;;
    remove|rm) #[directory]#delete current context
        sit contexts[current] delete
        sit 'current' ""
      ;;
    *)
        echo -e "\033[31mInvalid context action:\033[0m $1"
        return 1
      ;;
  esac
}

function doc() {
  if tty -s <&1; then
    source $BASH_SOURCE #keep dockerrc sourced for fast dev
  fi
  docker_extentions "$@"
}
