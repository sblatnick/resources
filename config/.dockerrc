#!/bin/bash

export DOC_CONFIG=~/.dockerrc
use ${DOC_CONFIG}
shopt -s extglob

#----------------------------------FUNCTIONS-----------------------------------#

function doc_ctx() {
  private
  sit 'current' "${1}" >/dev/null 2>&1
  path=$(sit contexts[current].path)
  echo -e "\033[33musing & entering\033[0m \033[32m${context}\033[0m (${path})"
  if [ "${path}" != "null" ];then
    cd ${path}
  fi
}
function docrc() {
  if [ "$#" -lt 1 ];then
    echo -e "Usage: docrc [name] [key] [value]"
    return
  fi

  target=$1
  shift
  key=$1
  shift
  value=$1

  rc=$(sit contexts[current].path)/.dockerrc
  result=$(SIT_TMP=${rc} sit contexts.${target}.${key} ${value})
  if [ $? -gt 0 ];then
    return 1
  fi
  echo "${result}"
}

#----------------------------------COMPLETIONS-----------------------------------#
function doc_complete() {
  case "${COMP_CWORD}" in
    1) #actions
        COMPREPLY=()
        local IFS=$'\n'
        complete_1 ${BASH_SOURCE}
      ;;
    *) #targets
        #add files/directories:
        COMPREPLY=($(compgen -f  -- "${COMP_WORDS[${COMP_CWORD}]}" | xargs -I {} bash -c 'if [ -d {} ];then echo {}/;else echo {}; fi'))
        case "${COMP_WORDS[1]}" in
          context|ctx|go)
              COMPREPLY=()
              section="##Context Actions (context|ctx|go):"
              #add contexts:
              COMPREPLY+=($(compgen -W "$(sit contexts)" -- "${COMP_WORDS[${COMP_CWORD}]}"))
            ;;
          img|build|make|run|push|pull|edit|new|list)
              #add image names:
              path=$(sit contexts[current].path)
              COMPREPLY+=($(compgen -W "$(ls -1 $path | sed 's/\.df//' | tr $'\n' ' ')" -- "${COMP_WORDS[${COMP_CWORD}]}"))
            ;;
        esac

        complete_2 "${section}" ${BASH_SOURCE}
      ;;
  esac
}
complete -o nospace -F doc_complete doc

##Main:
function docker_extentions() {
  private
  #------------------------------------SETUP-------------------------------------#

  #load defaults
  context=$(sit 'current')
  repo=$(sit 'repo')
  user=$(coalesce "$(sit 'user')" 'root')
  path=$(sit contexts[current].path)

  #------------------------------------MAIN--------------------------------------#
  action=$1
  shift

  while
    target=${1%%:*}
    start=$2
    version=${1/$target/}
    version=${version#:}
    version=${version:=0.1}

    if [ -f ${path}/${target} ];then
      df=${path}/${target}
    elif [ -f ${path}/${target}.df ];then
      df=${path}/${target}.df
    elif [ -f ${path}/${target}/Dockerfile ];then
      df=${path}/${target}/Dockerfile
    else
      df=${path}/${target}.df
    fi

    img=${target}
    stages=$(grep -E 'FROM .* AS .*' ${df} 2>/dev/null | sed -n 's/^.* AS //p')
    starget=''

    case "$action" in
      help|'') ##print this usage information
          echo -e "\033[1mDocker Extentions:\033[0m doc [\033[34;1mactions\033[0m]"
          document ${BASH_SOURCE}
          echo ""
          return
        ;;
      set) #[key] [value]#Set rc defaults such as: repo, user
          key=$target
          shift
          value=$@
          sit $key $value
        ;;
      sit) #[key] [values]#Set/Get rc for the current context (alias to docrc)
          key=$target
          shift
          value=$@
          docrc ${target} $key $value
        ;;
      edit|new) #[name]#open Dockerfile in current context, create new one if not present
          if [ -f ${df} ];then
            $EDITOR ${path}/${target}
          else
            cat > ${df} << EOF
FROM ${repo}centos:6
USER ${user-root}

RUN \
  yum install -y yum-utils && \
  yum install -y \
    gcc \
    autoconf \
    automake \
    libtool \
    make && \
  yum clean all

ENTRYPOINT /bin/bash
EOF
            $EDITOR ${df}
          fi
          return
        ;;
      list) ##list Dockerfiles in current context
          ls -1 $path | sed 's/\.df//'
          return
        ;;
      img|build|make) #[name]#Create docker image
          if [ -f ${df} ];then
            while read stage
            do
              if [ -n "${stage}" ];then
                if [[ -n "${start}" && "${stage}" != "${start}" ]];then
                  continue
                fi
                echo -en "\033[32;1mSTAGE: ${stage}\033[0m "
                starget="--target ${stage}"
                target="${img}/${stage}"
                #FIXME: .dockerignore can't exclude files from other stages :-(
                #include=$(cd ${path}/;sed -n "/FROM .* AS ${stage}\$/,/FROM .* AS / {s/ [^ ]*\$//;s~/[^/]*\$~~;s/ *\(COPY\|ADD\) //p}" ${df} | tr $'\n' '|')
                #$(cd ${path}/;ls -1d * | grep -Ev "^(${include}Dockerfile)\$" > .dockerignore)
              fi

              echo -e "\033[32mbuilding ${target}:${version} image\033[0m"
              eval docker build \
                ${starget} -t ${repo}${target}:${version} \
                -f ${df} \
                ${path}/
              #rm ${path}/.dockerignore
              #echo -e "\033[32mpush ${target}:${version} image\033[0m"
              #docker push ${repo}${target}:${version}
                 
            done < <(echo "${stages}")
          else
            echo -e "\033[33mERROR\033[0m: no such target: ${target}:${version}"
            return 1
          fi
        ;;
      run|dry|gui) #[application]#run a temporary container locally, running gui app, or display the command
          if [ -f ${df} ];then
            volumes=$(docrc ${target} 'volumes' | sed "s/~/${HOME//\//\\/}/" | sed '/^$/d;s/^/-v /')
            cwd=$(docrc ${target} 'cwd')
            if [ -n ${stages} ];then
              target=${img}/$(echo "${stages}" | tail -n 1)
            fi
          else
            volumes=""
            echo -e "\033[34mWARN\033[0m: no dockerfile: ${df} (${target}:${version}), attempting to continue anyway"
          fi
          cwd=${cwd:-/root}
          display=''
          dry=''
          after='return'
          if [[ "${action}" == "dry" ]];then
            echo -e "\033[33mentering ${target}:${version}\033[0m (dry)"
            dry="echo"
            after=''
          else
            if [[ "${action}" == "gui" ]];then
              echo -e "\033[33mexecuting app \"$1\" in ${target}:${version}\033[0m"
              display="-e DISPLAY=host.docker.internal:0"
              xhost + 127.0.0.1
              open -a XQuartz
              socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\"$DISPLAY\" &
              pid=$!
              after="kill $pid"
            fi
            echo -e "\033[33mentering ${target}:${version}\033[0m"
          fi
          $dry docker run --privileged=true -it --rm ${volumes} \
            -h ${target} \
            --name ${target} \
            -w ${cwd} \
            -P \
            ${display} \
            ${repo}${target}:${version} /bin/bash
          #"--privileged=true" for loop devices and mounting an iso
          $after
        ;;
      pull|push) ##pull/push image to repo
          if [ -f ${df} ];then
            docker ${action} ${repo}${target}:${version}
          else
            echo -e "\033[33mERROR\033[0m: no such target: ${target}:${version}"
            return 1
          fi
        ;;
      clean) ##remove exited containers and dangling images
          docker rm -v $(docker ps -a -q -f status=exited)
          docker rmi $(docker images -q -f dangling=true)
        ;;
      cleanvol) ##remove dangling volumes (dangerous)
          docker volume rm $(docker volume ls -q -f dangling=true)
        ;;
      context|ctx|go) #[$context|$dockerfile|$action]#context handling
          doc_context $@
          return
        ;;
      *)
          echo -e "\033[33mERROR\033[0m: invalid action ${action}"
          return 1
        ;;
    esac
    shift
    [ -n "$1" ]
  do
    continue
  done
}

##Context Actions (context|ctx|go):
function doc_context()
{
  private
  if [ $# -lt 1 ]; then
    local action='list'
  else
    local action=$1
    shift
  fi

  contexts="$(sit contexts)"
  ctxs=$(echo $contexts | tr ' ' '|')

  case "$action" in
    list|get) ##list contexts (default)
        longest=$(maxlen $contexts)
        for ctx in $contexts
        do
          path=$(sit contexts.$ctx.path)
          home=${HOME//\//\\/}
          path=${path//$home/\~}
          pad=$((2 + longest - $(expr length ${ctx})))
          mark=' '
          if [ "$ctx" == "$context" ];then
            mark='*'
          fi
          printf "\033[32m%s\033[36m%*s\033[0m%s\n" "${ctx}" "-${pad}" "${mark}" "${path}"
        done
      ;;
    new|add) #[name] [path]#create and use new context
        context="$1"
        shift
        path=$1
        if [ -n "${path}" ];then
          local OWD=$OLDPWD
          cd ${path} 2>/dev/null
          if [ "$?" -eq 0 ];then
            path=$(pwd)
          else
            echo -e "\033[31minvalid path:\033[0m ${path}"
            return 1
          fi
          cd - >/dev/null
          OLDPWD=$OWD
        else
          path=$(pwd)
        fi
        sit contexts.$context.path $path >/dev/null 2>&1
        sit 'current' "${context}" >/dev/null 2>&1
        echo -e "\033[33mcreated and using\033[0m \033[32m${context}\033[0m(${path})"
      ;;
    set|use) #[context]#switch to context
        context="$1"
        shift
        doc_ctx "${context}"
      ;;
    @(${ctxs})) #[context]#switch to context
        context="${action}"
        doc_ctx "${context}"
      ;;
    remove|rm) #[directory]#delete current context
        sit contexts[current] delete
        sit 'current' ""
      ;;
    *)
        echo -e "\033[31mInvalid context action:\033[0m $1"
        return 1
      ;;
  esac
}

function doc() {
  if tty -s <&1; then
    source $BASH_SOURCE #keep dockerrc sourced for fast dev
  fi
  docker_extentions "$@"
}