#!/bin/bash
#SIT = Settings In Terminal
#  store settings locally/globally in json
#  for command line program usage

export SIT_GLOBAL=~/.sitrc
shopt -s extglob
alias plain='sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g"'

#------------------------------PRIVATE FUNCTIONS-------------------------------#

function sit_key_escape() {
  echo $@ | sed 's/\([[:alnum:]_]*[-/][^.]*\)/"\1"/g;s/\[\([^\.]\)/[.\1/g'
}

function sit_get_json() {
  local file=$1
  shift
  local key=$(sit_key_escape $@)
  result=$(plain $file | jq -r "try (.${key} | if type==\"array\" then values[] elif type==\"object\" then keys[] else . end) catch \"sit_error\"")
  if [ "${result}" == "sit_error" ];then
    plain $file | jq -r ".${key%.*} | index(\"${key##*.}\") | type==\"number\""
  else
    echo "${result}"
  fi
}

function sit_set_json() {
  local file=$1
  shift
  local key=$(sit_key_escape $1)
  shift

  if [ "${file}" != "${SIT_GLOBAL}" ];then
    use $file #make sure it exists
  fi

  local settings=()
  local additions=()
  local removals=()
  local operator='|='
  while [ $# -gt 0 ]; do
    case "$1" in
      'null'|'delete'|'del') #delete
          plain $file | jq -C ". | del(.${key})" > ${file}.tmp && mv -f ${file}.tmp ${file} && cat ${file}
          return #deletion not compatible with other actions
        ;;
      '+'*) #add to list
          additions+=(${1:1})
        ;;
      '-'*) #remove from list
          removals+=(${1:1})
        ;;
      *) #set
          settings+=(${1})
        ;;
    esac
    shift
  done

  if [ ${#settings[@]} -gt 0 ];then
    if [ ${#settings[@]} -gt 1 ];then
      local array=$(printf ',"%s"' ${settings[@]})
      local array=${array:1}
      local value="[${array}]"
    else
      local value="\"${settings[0]}\""
    fi
    plain $file | jq -C ".${key} |= ${value}" > ${file}.tmp && mv -f ${file}.tmp ${file} && cat ${file}
    return #setter ignores additions/removals
  fi

  if [ ${#additions[@]} -gt 0 ];then
    local array=$(printf ',"%s"' ${additions[@]})
    local array=${array:1}
    local value="[${array}]"
    local result=$(plain $file | jq -C "try (.${key} += ${value}) catch \"sit_error\"")
    if [ "$(echo ${result} | plain)" == "\"sit_error\"" ];then
      local result=$(plain $file | jq -C ".${key} as \$old | .${key} |= [\$old,${array}]")
    fi
    echo "${result}" > ${file}.tmp && mv -f ${file}.tmp ${file} && cat ${file}
  fi

  if [ ${#removals[@]} -gt 0 ];then
    local array=$(printf ',"%s"' ${removals[@]})
    local array=${array:1}
    local value="[${array}]"
    plain $file | jq -C ".${key} -= ${value}" > ${file}.tmp && mv -f ${file}.tmp ${file} && cat ${file}
  fi
}

#--------------------------------API FUNCTIONS---------------------------------#

#not used?
function coalesce() {
  while [ $# -gt 0 ]; do
    case "$1" in
      'null'|'false'|*( ))
        ;;
      *)
          echo $1
          return
        ;;
    esac
    shift
  done
  echo ''
}

function use() {
  if [ -z "$1" ];then
    echo -e "using: $(gsit 'current')"
    return
  fi
  local config=$(readlink -f $1)
  if [ ! -f "${config}" ];then
    if [ -d "${config}" ];then
      local config=${config}/config.json #reasonable default for directory: use .
    fi
    echo '{ }' > ${config} 2>/dev/null
    if [ $? -gt 0 ];then
      echo -e "invalid path/permissions: ${config}"
      return 1
    fi
  fi
  if [ ! -f "${SIT_GLOBAL}" ];then
    echo '{ }' > ${SIT_GLOBAL} 2>/dev/null
  fi
  export SIT_CURRENT="${config}"
  gsit "current" "${SIT_CURRENT}" >/dev/null
}

function sit() {
  local level='global'
  if [ -z "${SIT_TMP}" ];then
    local level='local'
    if [ -z "${SIT_CURRENT}" ];then
      export SIT_CURRENT=$(gsit 'current')
    fi
  fi
  local conf=${SIT_TMP-$SIT_CURRENT}

  if [ -z "$1" ];then
    echo -e "SET/GET ${level} setting
Usage: sit [key] [value...]"
    return
  fi
  if [ $# -gt 1 ];then #set
    sit_set_json "${conf}" $@
  else #get
    sit_get_json "${conf}" $@
  fi
}

function gsit() {
  SIT_TMP=${SIT_GLOBAL} sit $@
}

function hsit() {
  if [ -z "$1" ];then
    echo -e "GET highest setting: COALESCE(local, global, default, '')
Usage: hsit [key] [default]"
    return
  fi
  local key=$1
  local default=$2

  for func in "sit gsit"
  do
    local value=$(${func} "${key}")
    if [ -n "${value}" ];then
      echo "${value}"
      return
    fi
  done
  echo "${default}"
}



