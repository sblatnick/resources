#!/bin/bash
#Utility functions

shopt -s expand_aliases extglob
set -o pipefail

#-----------------------------------GLOBALS------------------------------------#
PID=$$

#-----------------------------------LOGGING------------------------------------#
DEBUG=false

function error() {
  >&2 echo -e "$(date +'%F %T') \033[31mERROR\033[0m: $@"
  exit 1
}
function log() {
  echo -e "$(date +'%F %T')   \033[0;1mLOG\033[0m: $@"
}
function warn() {
  >&2 echo -e "$(date +'%F %T')  \033[33;1mWARN\033[0m: $@"
}
function debug() {
  if [[ "${DEBUG}" == "true" ]];then
    echo -e "$(date +'%F %T')   \033[32mDEBUG\033[0m: $@"
  fi
}
function run() {
  interpreted=$(echo "$@" | evaluator)
  echo -e "$(date +'%F %T')   \033[0;1m${interpreted}\033[0m"
  eval "${interpreted}" 2>&1 | tr '\r' '\n' | sed -u 's/^/  /'
  return $?
}
function show() {
  interpreted=$(echo "$@" | evaluator)
  echo -e "\033[0;1m${interpreted}\033[0m"
  eval "${interpreted}"
  return $?
}
function exp() {
  set -a
  eval "$@"
  set +a
}

#------------------------------------UTILS-------------------------------------#

function coalesce() {
  while [ $# -gt 0 ]; do
    case "$1" in
      'null'|'false'|*( ))
        ;;
      *)
          echo $1
          return
        ;;
    esac
    shift
  done
  echo ''
}

function pipe() {
  if [ -t 0 ];then
    if [ "$#" -lt 1 ];then
      if [ -n "${USAGE}" ];then
        echo -e "Usage: ${USAGE}"
      else
        echo -e "Usage: stdin | ${BIN-pipe} ${PARAM}[lines|file]"
      fi
      return
    else
      result=""
      while [ -n "$1" ]; do
        if [ -f $1 ];then
          if [[ "line" == "${TYPE-line}" ]];then
            while IFS=$'\n' read pipe
            do
              eval ${ACTION-echo} "$pipe"
            done < $1
          else
            while IFS=$'\n' read pipe
            do
              result="${result}${pipe}"
            done < $1
          fi
        else
          if [[ "line" == "${TYPE-line}" ]];then
            eval ${ACTION-echo} "$1"
          else
            result="${result}${1}"
          fi
        fi
        shift
      done
      if [ -n "${result}" ];then
        eval ${ACTION-echo} "${result}"
      fi
    fi
  else
    if [[ "line" == "${TYPE-line}" ]];then
      if [[ "false" == "${HEADER-false}" ]];then
        while IFS=$'\n' read pipe
        do
          eval ${ACTION-echo} "${pipe}"
        done
      else
        while IFS=$'\n' read pipe
        do
          output=$(eval ${ACTION-echo} "${pipe}")
          if [ -n "${output}" ];then
            echo -e "\033[32m${pipe}\033[0m"
            echo "${output}" | sed 's/^/  /'
          fi
        done
      fi
    else
      result=""
      while IFS=$'\n' read pipe
      do
        result="${result}${pipe}"
      done
      eval ${ACTION-echo} "${result}"
    fi
  fi
}

function chomp() {
  BIN='chomp' pipe $@ | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'
}

function indent() {
  BIN='indent' pipe $@ | sed -u 's/^/  /'
}

function evaluator() {
  BIN='evaluator' pipe $@ | sed 's/"/\\\"/g;s/.*/echo "&"/e'
}

function join() {
  ARG=$1
  shift
  BIN='join' PARAM='[delimiter] ' pipe $@ | sed ":a;N;\$!ba;s/\n/${ARG//\//\\/}/g"
}

function min() {
  BIN='min' pipe $@ | sort -n | head -n 1
}

function max() {
  BIN='max' pipe $@ | sort -n | tail -n 1
}

function len() {
  expr length $@
}

#line count:
function lc() {
  BIN='lc' pipe $@ | wc -l | chomp
}

function minlen() {
  BIN='minlen' ACTION='len' pipe $@ | sort -n | head -n 1
}

function maxlen() {
  BIN='maxlen' ACTION='len' pipe $@ | sort -n | tail -n 1
}

function _color() {
  case ${COLOR} in
    *bold*|*thick*)
        local bold=';1'
      ;;
  esac

  case ${COLOR} in
    *cyan*|*bluegreen*)
        local code=36${bold}
      ;;
    *pink*)
        local code="38;5;198${bold}"
      ;;
    *highlight*)
        local code="48;5;228;38;5;0${bold}"
      ;;
    *black*)
        local code=30${bold}
      ;;
    *red*|*blood*)
        local code=31${bold}
      ;;
    *green*)
        local code=32${bold}
      ;;
    *yellow*)
        local code=33${bold}
      ;;
    *blue*)
        local code=34${bold}
      ;;
    *magenta*|*purple*)
        local code=35${bold}
      ;;
    *gray*)
        local code=37${bold}
      ;;
    ''|*white*)
        local code=0${bold}
      ;;
    bold)
        local code='0;1'
      ;;
    *) #passthrough
        local code="${COLOR}"
      ;;
  esac

  echo -e "\033[${code}m$@\033[0m"
}

function color() {
  if [ -t 0 ];then
    echo -e "Usage: stdin | color [color]"
    if [ "$#" -lt 1 ];then
      echo -e "\033[31mpipe required to colorize\033[0m"
      return 1
    fi
  else
    COLOR="$@" BIN='color' ACTION="_color" pipe
  fi
}

function big() {
  du -sx * 2>/dev/null | sort -r -n | head
}

function enc() {
  echo "$@" | openssl rsautl -encrypt -pubin -inkey ~/.ssh/id_rsa.pub.pem | base64
}
function dec() {
  echo "$@" | base64 -d | openssl rsautl -decrypt -inkey ~/.ssh/id_rsa
}

function encrypt() {
  if [ ! -f ~/.ssh/id_rsa.pub.pem ];then
    warn "Key ~/.ssh/id_rsa.pub.pem doesn't exist, creating..."
    >&2 openssl rsa -in ~/.ssh/id_rsa -pubout > ~/.ssh/id_rsa.pub.pem
  fi
  BIN='encrypt' ACTION='enc' pipe $@
}
function decrypt() {
  BIN='decrypt' ACTION='dec' TYPE='stream' pipe $@
}

function has() {
  shopt -s expand_aliases
  local IFS=$'\n'
  ret=1
  while read pipe
  do
    echo -e "${pipe}"
    echo $pipe | grep -Pq "$@"
    if [ $? -eq 0 ];then
      ret=0
    fi
  done
  return $ret
}

#Example: files search1 | files search2 | grepper search3
function grepper() {
  HEADER='true' USAGE='filelist | grepper [search]' BIN='grepper' ACTION="ag --color --numbers '$@'" pipe
}

function files() {
  if [ -t 0 ];then
    if [ "$#" -lt 1 ];then
      echo -e "Usage: filelist | files [search]"
      echo -e "  List files containing the search term"
    else
      ag -l $@
    fi
  else
    #Use grep instead of ag here so piping doesn't break the eval on single files:
    USAGE='filelist | files [search]' BIN='files' ACTION="grep -l --color=never $@" pipe
  fi
}

function _opener() {
  USAGE='filelist | opener [search]' BIN='opener' ACTION="geany" pipe
}
function opener() {
  if [ -t 0 ];then
    if [ "$#" -lt 1 ];then
      echo -e "Usage: filelist | opener [search]"
    else
      ag -l "$@" | _opener
    fi
  else
    _opener
  fi
}
#geany grep: open geany for all files that have the pattern in the contents
alias gg='opener'

function each() {
  action=$1
  shift
  if [[ -z "${action}" ]];then
    echo -e "Usage: lines | each [action] [file]"
  else
    file=$1
    BIN='each' ACTION="${action}" pipe ${file}
  fi
}

function insert() {
  if [ "$#" -lt 3 ];then
    echo -e "Usage: insert [line number] [text] [file]"
    return
  fi
  local line=$1
  shift
  local text=$1
  shift
  local file=$1
  shift
  sed -i ${line}'{/'${text:0:3}'/! i\'${text}'
}' ${file}
}

function append() {
  if [ "$#" -lt 2 ];then
    BIN='append' document_title "Append to file if not found" "file" "text"
    return
  fi
  local file=$1
  local text=$2
  if ! grep -q "^${text}\$" ${file} 2>/dev/null; then
    echo "${text}" >> ${file}
  fi
}

function rmline() {
  if [ "$#" -lt 2 ];then
    BIN='rmline' document_title "Remove line from file" "file" "text"
    return
  fi
  local file=$1
  local text=$2
  sed -i "/^${text//\//\\/}\$/d" ${file}
}

function stack() {
  pid=${1-$$}
  if [[ $pid -eq $$ ]];then
    printf "%-5s %s\n" "PID" "COMMAND"
  fi
  read ppid command < <(ps -o ppid=,args= ${pid})
  printf "%-5s %s\n" ${pid} "${command}"
  if [[ 1 -ne ${ppid} ]];then
    stack ${ppid}
  fi
}

function export_all() {
  if [ "$#" -lt 1 ];then
    echo -e "Usage: export_all [file]"
    return
  fi
  for var in $(grep -o '^[[:space:]]*[A-Za-z_]*=' ${1} | sed 's/=$//;s/^ *//')
  do
    export $var
  done
}

function hide() {
  local full=${1%/}
  local name=${full##*/}
  local path=${full%%$name}
  local old=${path}${name}
  local new=${path}.${name}
  if [[ -f ${old} ]] || [[ -d ${old} ]];then
    echo "hiding to ${new}"
    mv ${old} ${new}
  else
    echo "no such file or directory: ${old}"
  fi
}

function unhide() {
  local full=${1%/}
  local name=${full##*/}
  local shown=${name#.}
  local path=${full%%$name}
  local old=${path}${name}
  local new=${path}${shown}
  if [[ "${name}" == "${shown}" ]];then
    echo "not currently hidden: ${old}"
  elif [[ -f ${old} ]] || [[ -d ${old} ]];then
    echo "unhiding to ${new}"
    mv ${old} ${new}
  else
    echo "no such file or directory: ${old}"
  fi
}

function pathify() {
  BIN='pathify' pipe $@ | \
    tr '[:upper:]' '[:lower:]' | \
    tr -d '!@#$%^&*()=+`\|<>,;?' | \
    tr ' :' '_' | \
    tr $'\n' '_' | \
    sed 's/_$/\n/'
}
function extension() {
  filename=${1##*/}
  case ${filename} in
    *.tar.*)
        subext='tar.'
      ;;
  esac
  echo "${subext}${filename##*.}"
}

alias datetime="date +'%F %T'"
alias today="date +'%F'"

function older() {
  if [ "$#" -lt 2 ];then
    echo -e "Usage: older [time] [file]"
    return 1
  fi
  age=$(date --date="$1 ago" +%s)
  last=$(stat -c '%Y' $2 2>/dev/null)
  if [ -z "${last}" ];then
    echo -e "  no such file: '$2'"
    return 0
  elif [ ${last} -lt ${age} ];then
    echo -e "  '$2' is older than '$1' ago"
    return 0
  else
    echo -e "  '$2' is less than '$1' ago"
    return 1
  fi
}

#--------------------------------DOCUMENTATION---------------------------------#

function document_title() {
  local description=$1
  local bin=${BIN-${0##*/}}
  shift
  local params=""
  while [ -n "$1" ]
  do
    params+=$(printf "[\033[34;1m%s\033[0m] " "${1}")
    shift
  done
  printf "\033[1m%s:\033[0m %s %s" "${description}" "${bin}" "${params}"
  echo ""
}
function document_header() {
  echo ""
  echo -e "  \033[1m${1}\033[0m"
}
function de() {
  local var=${1}
  shift
  if [ -n "${2}" ];then
    local param=${1}
    shift
  fi
  local help=${1}

  col=$(printf "\033[34;1m%s\033[0m %s" "${var}" "${param}")
  printf "    %-60s %s\n" "${col}" "${help}"
}

function document() {
  grep -Eo '^##.*$' $1 |
  while read section
  do
    document_header "${section#\#\#}"
    sed -n "/^${section}\$/,/^\(##.*\|\}\)\$/ p" $1 | grep -Eo '[^ (]+\)\s+#.*$' | \
    while read help
    do
      params=${help#*#}
      params=${params%%#*}
      if [ -z "${params}" ];then
        params="$(grep -A 1 -F "${help}" $1 | tail -n 1 | grep 'trap' | grep -Eo '\[[^]]*\]' | tr $'\n' ' ')"
      fi
      de "${help%%)*#*}" "${params}" "${help##*#}"
    done
  done
}

#---------------------------------COMPLETION-----------------------------------#

function complete_section() {
  section=$1
  shift

  if [ -n "${section}" ];then
    COMPREPLY+=($(compgen -W "$(sed -n "/^${section}\$/,/^\(##.*\|\}\)\$/ p" $1 | grep -Eo '[^ (]+\)\s+#.*$' | sed 's/))* .*$//' | grep -Ev '[\$\*]' | tr '|' $'\n')" -- "${COMP_WORDS[${COMP_CWORD}]}"))
  fi
}

function complete_sections() {
  local IFS=$'\n'
  for section in $(grep -Eom 2 '^##.*$' $1)
  do
    complete_section "${section}" $1
  done
}

function complete_pwd() {
  COMPREPLY+=($(compgen -f  -- "${COMP_WORDS[${COMP_CWORD}]}" | xargs -I {} bash -c 'if [ -d "{}" ];then echo {}/;else echo {}; fi'))
}

function complete_help() {
  completion=$(complete -p $1 | grep -Po " -F [^\s]*" | cut -d' ' -f3)
  for i in {1..3}
  do
    echo -e "\033[32m$i\033[0m:"
    COMP_CWORD=$i
    eval $completion
    for arg in ${COMPREPLY[@]};
    do
      echo -e "  ${arg}"
    done
  done
}
alias cee='complete_help'
#--------------------------------CONFIGURATION---------------------------------#

function ensure() {
  local bins=()
  while [ -n "$1" ]; do
    case $1 in
      --pkg|--package|-p)
          local package=$2
          shift
        ;;
      *)
          bins+=($1)
        ;;
    esac
    shift
  done

  for bin in ${bins[@]}
  do
    local pkg=${package-$bin}
    which ${bin} >/dev/null 2>&1 \
      || check_package ${pkg} \
      && log "${bin} already installed" \
      || run ${INSTALLER} ${pkg} \
      || warn "${pkg} failed to install"
  done
}

#-------------------------------------TMP--------------------------------------#

function tmpdir() {
  export tmp=${TMP-/tmp}/util-${PID}
  OWD=$OLDPWD
  CWD=$PWD
  if [ -d ${tmp} ];then
    return
  else
    debug "tmpdir: ${tmp}"
    mkdir -p ${tmp}
  fi
  function cleanup_tmpdir() {
    local call=$1
    if [[ 'NULL' == "${call}" ]];then
      if [ -f ${tmp}/save ];then
        warn "tmpdir retained: ${tmp}"
      else
        debug "cleanup: ${tmp}"
        rm -rf ${tmp} >/dev/null 2>&1
      fi
      trap - RETURN SIGINT
      pkill -P ${PID}
      cd $CWD
      OLDPWD=$OWD
    fi
  }
  trap "call=\$(caller | cut -d' ' -f2); cleanup_tmpdir \$call" RETURN EXIT
  trap "cleanup_tmpdir NULL" SIGINT
}

function tmpsave() {
  echo -e "\033[34mretain tmpdir: ${tmp}\033[0m"
  touch ${tmp}/save
}
