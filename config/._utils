#!/bin/bash
#Utility functions

shopt -s expand_aliases extglob
set -o pipefail

#-----------------------------------LOGGING------------------------------------#

function error() {
  >&2 echo -e "$(date +'%F %T') \033[31mERROR\033[0m: $@"
  exit 1
}
function log() {
  echo -e "$(date +'%F %T')   \033[0;1mLOG\033[0m: $@"
}
function warn() {
  echo -e "$(date +'%F %T')  \033[33;1mWARN\033[0m: $@"
}
function run() {
  echo -e "$(date +'%F %T')   \033[0;1m$@\033[0m"
  $@ 2>&1 | tr '\r' '\n' | sed -u 's/^/  /'
  return $?
}

#------------------------------------UTILS-------------------------------------#

function coalesce() {
  while [ $# -gt 0 ]; do
    case "$1" in
      'null'|'false'|*( ))
        ;;
      *)
          echo $1
          return
        ;;
    esac
    shift
  done
  echo ''
}

function pipe() {
  if [ -t 0 ];then
    if [ "$#" -lt 1 ];then
      echo -e "Usage: stdin | ${BIN-pipe} [lines|file]"
      return
    else
      while [ -n "$1" ]; do
        if [ -f $1 ];then
          cat $1 |
          while read pipe
          do
            ${ACTION-echo} "$pipe"
          done
        else
          ${ACTION-echo} "$1"
        fi
        shift
      done
    fi
  else
    while IFS= read pipe
    do
      ${ACTION-echo} "$pipe"
    done
  fi
}

function min() {
  BIN='min' pipe $@ | sort -n | head -n 1
}

function max() {
  BIN='max' pipe $@ | sort -n | tail -n 1
}

function len() {
  expr length $@
}

function minlen() {
  BIN='max' ACTION='len' pipe $@ | sort -n | head -n 1
}

function maxlen() {
  BIN='max' ACTION='len' pipe $@ | sort -n | tail -n 1
}

function big() {
  du -sx * 2>/dev/null | sort -r -n | head
}

function has() {
  local IFS=$'\n'
  ret=1
  while read pipe
  do
    echo -e "${pipe}"
    echo $pipe | grep -Pq "$@"
    if [ $? -eq 0 ];then
      ret=0
    fi
  done
  return $ret
}

function insert() {
  if [ "$#" -lt 3 ];then
    echo -e "Usage: insert [line number] [text] [file]"
    return
  fi
  local line=$1
  shift
  local text=$1
  shift
  local file=$1
  shift
  sed -i ${line}'{/'${text:0:3}'/! i\'${text}'
}' ${file}
}

#--------------------------------DOCUMENTATION---------------------------------#

function document() {
  grep -Eo '^##.*$' $1 |
  while read section
  do
    echo ""
    echo -e "  \033[1m${section#\#\#}\033[0m"
    sed -n "/^${section}\$/,/^\(##.*\|\}\)\$/ p" $1 | grep -Eo '[^ (]+\)\s+#.*$' | \
    while read help
    do
      params=${help#*#}
      params=${params%%#*}
      if [ -z "${params}" ];then
        params="$(grep -A 1 -F "${help}" $1 | tail -n 1 | grep 'trap' | grep -Eo '\[[^]]*\]' | tr $'\n' ' ')"
      fi
      col=$(printf "\033[34;1m%s\033[0m %s" "${help%%)*#*}" "${params}")
      printf "    %-60s %s\n" "${col}" "${help##*#}"
      #printf "    \033[34;1m%-15s\033[0m %s\n" "${help%%)*#*}" "${help#*#}"
    done
  done
}

#---------------------------------COMPLETION-----------------------------------#

function complete_section() {
  section=$1
  shift

  if [ -n "${section}" ];then
    COMPREPLY+=($(compgen -W "$(sed -n "/^${section}\$/,/^\(##.*\|\}\)\$/ p" $1 | grep -Eo '[^ (]+\)\s+#.*$' | sed 's/))* .*$//' | grep -Ev '[\$\*]' | tr '|' $'\n')" -- "${COMP_WORDS[${COMP_CWORD}]}"))
  fi
}

function complete_sections() {
  local IFS=$'\n'
  for section in $(grep -Eom 2 '^##.*$' $1)
  do
    complete_section "${section}" $1
  done
}

function complete_pwd() {
  COMPREPLY+=($(compgen -f  -- "${COMP_WORDS[${COMP_CWORD}]}" | xargs -I {} bash -c 'if [ -d "{}" ];then echo {}/;else echo {}; fi'))
}

function complete_help() {
  completion=$(complete -p $1 | grep -Po " -F [^\s]*" | cut -d' ' -f3)
  for i in {1..3}
  do
    echo -e "\033[32m$i\033[0m:"
    COMP_CWORD=$i
    eval $completion
    for arg in ${COMPREPLY[@]};
    do
      echo -e "  ${arg}"
    done
  done
}
alias cee='complete_help'
#--------------------------------CONFIGURATION---------------------------------#

function ensure() {
  local bins=()
  while [ -n "$1" ]; do
    case $1 in
      --pkg|--package|-p)
          local package=$2
          shift
        ;;
      *)
          bins+=($1)
        ;;
    esac
    shift
  done

  for bin in ${bins[@]}
  do
    local pkg=${package-$bin}
    which ${bin} >/dev/null 2>&1 \
      || check_package ${pkg} \
      && log "${bin} already installed" \
      || run ${INSTALLER} install ${pkg} \
      || warn "${pkg} failed to install"
  done
}
