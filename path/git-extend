#!/bin/bash

set -e
CONFIG=~/.git-extend

#------------------------------------USAGE-------------------------------------#
if [ $# -lt 1 ]; then
  echo "Usage: ${0##*/} [actions]
  Actions:
    context  = repo context maintenence
      list           = list contexts
      new [name]     = create context
      set|use [name] = switch to context
      add [path]     = add pwd or path to the current context
      remove         = remove from the current context

    modified = open all of the modified files in ${EDITOR}

    do|dob|mod|mob|with|stats = Current context actions
"
  exit
fi

#------------------------------------SETUP-------------------------------------#

if [ -f ${CONFIG} ];then
  source ${CONFIG}
else
  echo -e "\033[33m${0##*/} first run...\033[0m"

  echo "  set pager, changing tab length"
    git config --global core.pager 'less -x2'

  echo "  allow simple push/pull"
    git config --global push.default simple # tracking ?

  echo "  setup colors..."
    git config --global color.diff auto
    git config --global color.branch auto
    git config --global color.status auto

    git config --global color.branch.current "yellow reverse"
    git config --global color.branch.local yellow
    git config --global color.branch.remote green

    git config --global color.diff.whitespace "red reverse"

    git config --global color.status.added yellow
    git config --global color.status.changed green
    git config --global color.status.untracked cyan

  echo "  setup aliases..."
    git config --global alias.rev 'checkout --'
    git config --global alias.wash "!git-extend wash"
    case "$(uname -s)" in
      Darwin) #Mac
          git config --global alias.tut "!open -a \"${EDITOR}\" ~/projects/resources/git/usage.sh"
        ;;
      Linux)
          git config --global alias.tut "${EDITOR} ~/projects/resources/git/usage.sh"
        ;;
    esac

  echo "  setup extentions..."
    for extension in modified stats do with dob mod mob context
    do
      git config --global alias.${extension} "!git-extend ${extension}"
    done
  touch ${CONFIG}
  echo -e "\033[32mDONE\033[0m"
fi

#----------------------------------FUNCTIONS-----------------------------------#

function action() {
  local ACTION=$1
  shift
  local ARGS=$@

  for repo in $(echo ${!current})
  do
    repo=${repo//\~/$HOME}
    start=$(pwd)
    cd ${repo}
      repo=${repo##*/}
      local branch=$(git rev-parse --abbrev-ref HEAD)
      local dirty=''
      if [ -n "$(git status --porcelain)" ]; then
        local dirty='*'
      fi
      local output="\033[34m${repo}\033[0m \033[32m$branch\033[36m$dirty\033[0m"

      case "${ACTION}" in
        stats)
            echo -e "${output}"
            git status -s
          ;;
        do)
            echo -e "${output}"
            eval "git $ARGS 2>&1"
          ;;
        dob)
            if [ "$BRANCH" == "$branch" ]; then
              echo -e "${output}"
              eval "git $ARGS 2>&1"
            fi
          ;;
        mod)
            if [ -n "$(git status --porcelain)" ]; then
              echo -e "${output}"
              eval "git $ARGS 2>&1"
            fi
          ;;
        mob)
            if [[ "$BRANCH" == "$branch" && -n "$(git status --porcelain)" ]]; then
              echo -e "${output}"
              eval "git $ARGS 2>&1"
            fi
          ;;
        with)
            echo -e "${output}"
            local ARGS=${ARGS//REPO/$repo}
            eval "$ARGS"
          ;;
        *)
          echo -e "\033[31mInvalid action:\033[0m ${ACTION}"
          exit 1
          ;;
      esac
    cd $start
  done
}

function add_repo_to_context() {
  set +e
  local repo=$1
  cd ${repo}
  repo=$(basename $(git rev-parse --show-toplevel 2>/dev/null) 2>/dev/null)
  if [[ "$?" -eq 0 ]];then
    echo -e "\033[32madding\033[0m ${repo}"
    #pwd only works here because git runs extensions from the top level
    repos="${repos}
$(pwd)"
  else
    echo -e "\033[31minvalid repo\033[0m ${1}"
  fi
  cd - >/dev/null
}

function context()
{
  if [ $# -lt 1 ]; then
    local action='list'
  else
    local action=$1
    shift
  fi

  contexts=()
  IFS=$'\n' read -ra contexts <<< $(grep -E '="$' ${CONFIG} | sed 's/="$//')
  repos=$(echo "${!current}" | sed '/^$/d')

  case "$action" in
    list)
        for context in ${contexts[@]}
        do
          if [ "$context" == "$current" ];then
            echo -e "\033[32m${context}\033[36m*\033[0m"
          else
            echo -e "\033[32m${context}\033[0m"
          fi
        done
        return
      ;;
    new)
        local context=$1
        shift
        current="$context"
        contexts="${contexts}
${context}"
        declare ${current}="
"
        echo -e "\033[33mcreated and using\033[0m \033[32m${context}\033[0m"
      ;;
    set|use)
        local context=$1
        shift
        current="$context"
        echo -e "\033[33musing\033[0m \033[32m${context}\033[0m"
      ;;
    add)
        if [ -n "$1" ];then
          while [ -n "$1" ]
          do
            add_repo_to_context $1
            shift
          done
        else
          add_repo_to_context $(pwd)
        fi
        declare ${current}="${repos}"
      ;;
    remove)
        while [ -n "$1" ]
        do
          local repo=$1
          echo "removing ${repo}"
          shift
          declare ${current}="$(sed "/\/${repo}$/d" <<< "${repos}")"
        done
      ;;
    help)
        git extend #print git extend usage
      ;;
    *)
        echo -e "\033[31mInvalid context action:\033[0m $1"
        exit 1
      ;;
  esac

  echo "current=\"${current}\"" > ${CONFIG}
  for context in $contexts
  do
    echo "${context}=\"
$(echo "${!context}" | sed '/^$/d')
\"" >> ${CONFIG}
  done
  echo "" >> ${CONFIG}
}


#------------------------------------MAIN--------------------------------------#

ACTION='noop'

case "$1" in
  modified)
    dir=$(pwd)
    IFS=$'\n'
    files=$(git status -s)
    for file in $files
    do
      $EDITOR $dir/${file##* }
    done
    exit
    ;;
  wash)
      branch=$(git rev-parse --abbrev-ref HEAD)
      git pull origin $branch
      if [ -n "$(git status --porcelain)" ];then
        echo -e "\033[33munmerged changes\033[0m"
      else
        git push origin $branch
      fi
    ;;
  do|dob|mod|mob|with|stats)
      BRANCH=$(set +e;git rev-parse --abbrev-ref HEAD 2>/dev/null;set -e)
      action $@
    ;;
  context)
      shift
      context $@
    ;;
  *)
    echo -e "\033[31mInvalid action:\033[0m $1"
    exit 1
    ;;
esac


