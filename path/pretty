#!/usr/bin/perl
use strict;
use experimental qw(switch);

my $contents;
my $output;

undef $/;
my $contents;

sub separate {
  my $start = $_[1];
  my $end = $_[2];

  my @words;
  #while($_[0] =~ /$start([^\n]+)$end/g) {
  while($_[0] =~ /$start(.+)$end/g) {
    push @words, $1;
  }
  for my $old (@words) {
    my $new = $old;
    $new =~ s/\s+/\n/g;
    #print "old: '$old' vs new: '$new'\n";
    if($old ne $new) {
      $_[0] =~ s/$start$old$end/$start$new$end/;
    }
  }
}

#Expansion:
while (<>)
{
  $contents = $_;

  #Isolation:
    #HTML entities:
      $contents =~ s/(<[^>]+>)/\n$1\n/sg;
      separate($contents, "\n<", ">\n");           #attributes
      $contents =~ s/(<[^ ]+ +)/$1\n/sg;           #first attribute again
      $contents =~ s/(["'])>\n/\n$1\n>/sg;         #closing
      $contents =~ s/\/>\n/\n\/>/sg;               #closing
      $contents =~ s/\n([^\/<\s]+)>/\n$1\n>/sg;    #closing
    #quoted words:
      $contents =~ s/"([^"\n]+)"\s*/"\n$1\n"\n/sg;
      $contents =~ s/'([^'\n]+)'\s*/'\n$1\n'\n/sg;
      separate($contents, "\"\n", "\n\"\n");
      separate($contents, "'\n", "\n'\n");
    #quoted within html
      $contents =~ s/(?<=[=:])(["'])/$1\n/sg;
      $contents =~ s/(["'])>\n/\n$1\n>\n/sg;
    #open:
      $contents =~ s/([\(\[\{>])\s*/$1\n/sg;       #brackets
    #close:
      $contents =~ s/([\)\]\}])\s*/\n$1\n/sg;      #brackets
    #trailing commas:
      $contents =~ s/\s*,\s*/\n,\n/sg;
  #Consolidatation:
    #brackets:
      $contents =~ s/\[\s*\]/[]\n/sg;
      $contents =~ s/\(\s*\)/()\n/sg;
      $contents =~ s/\{\s*\}/{}\n/sg;
    #quotes:
      $contents =~ s/"\s*"/""\n/sg;
      $contents =~ s/'\s*'/''\n/sg;
}
$/ = "\n";

#Indentation:
my $indent = 0;
open(LINES, "<", \$contents) or die qq~Could not analyze by line~;
open(OUTPUT, ">", \$output) or die qq~Could not write to variable~;

while (<LINES>)
{
  my $line = $_;
  chomp($line);
  $indent-- if($line =~ /^["'\)\]\}>]$|^\/>$|^<\//);
  if($line ne "") {
    print OUTPUT ("  " x $indent) . $line . "\n";
  }
  $indent++ if($line =~ /(?<=.)["'\(\[\{]$|<(?!\/)|^>$/);
}
close(LINES);
close(OUTPUT);

#Consolidation:
undef $/;
open(REFLOW, "<", \$output) or die qq~Could not reflow lines~;
while (<REFLOW>)
{
  $contents = $_;


  #~ #Brackets/quotes on the same line as assignment
  #~ $contents =~ s/([=:])\n\s*([\(\[\{"'\w])/$1$2/sg;
  #~ #Comma on same line as bracket/quotes
  #~ $contents =~ s/([\]\)\}'"])\n\s*,/$1,\n/sg;
  #~ #Name on same line as opening bracket
  #~ $contents =~ s/(?<=\w)\s+([\[\(\{])\n/$1\n/sg;

  #~ #Remove excessive word isolation:
  #~ $contents =~ s/([\w-]+)\n(?! *[\(\)\[\]\{\}"'>])/$1 /sig;

  #~ #Remove blank lines and excessive whitespace:
  #~ $contents =~ s/\s+\n/\n/sg;
  #~ $contents =~ s/(?<!\s)[ \t]+/ /sg;

  #~ #Consolidate single attributes/parameters:
  #~ $contents =~ s/"\s+(\w{1,50})\s+"/"$1"/sg;
  #~ $contents =~ s/'\s+(\w{1,50})\s+'/'$1'/sg;
  #~ $contents =~ s/>\s+(\w{1,50})\s+</>$1</sg;
  #~ $contents =~ s/\{\s+(\w{1,50})\s+\}/{$1}/sg;
  #~ $contents =~ s/\[\s+(\w{1,50})\s+\]/[$1]/sg;
  #~ $contents =~ s/\(\s+(\w{1,50})\s+\)/($1)/sg;
  #~ #Drop HTML property below:
  #~ $contents =~ s/(<\w+) (\w+=["']\w+["'])(\s+)/$1$3$2$3/sig;
  #~ #Place " and > together:
  #~ $contents =~ s/\s+(['"])(\s+)>/$2$1>/sig;
}
$/ = "\n";
close(REFLOW);

print "$contents";