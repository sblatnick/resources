#!/usr/bin/perl
use strict;
use experimental qw(switch);

my $contents;
my $output;

undef $/;
my $contents;

#Split entities by line:
while (<>)
{
  $contents = $_;
  #Whitespace consolidation:
  $contents =~ s/[\n\r ]+/\n/sg;

  #HTML:
  $contents =~ s/(<[\/\w].*[\w]>)/\n$1\n/sg;

  #Trailing commas:
  $contents =~ s/\s*,\s*/,\n/sg;

  #Bracket/quote isolation:
  $contents =~ s/\s*([\(\)\[\]\{\}"'>])\s*/\n$1\n/sg;
  $contents =~ s/\s*</\n</sg;
  $contents =~ s/<(\/?\w+)\n>/<$1>/sg;

}
$/ = "\n";

#Indentation:
my $indent = 0;
open(LINES, "<", \$contents) or die qq~Could not analyze by line~;
open(OUTPUT, ">", \$output) or die qq~Could not write to variable~;

while (<LINES>)
{
  my $line = $_;
  chomp($line);
  $indent-- if($line =~ /^[\)\]\}>]$|^<\//);
  if($line ne "") {
    print OUTPUT ("  " x $indent) . $line . "\n";
  }
  $indent++ if($line =~ /^[\(\[\{>]$|^<(?!\/)/);
}
close(LINES);
close(OUTPUT);

#Consolidation:
undef $/;
open(REFLOW, "<", \$output) or die qq~Could not reflow lines~;
while (<REFLOW>)
{
  $contents = $_;
  #Consolidate empty brackets/quotes:
  $contents =~ s/\[\n\s*\]/[]\n/sg;
  $contents =~ s/\(\n\s*\)/()\n/sg;
  $contents =~ s/\{\n\s*\}/{}\n/sg;
  $contents =~ s/"\n\s*"/""\n/sg;
  $contents =~ s/'\n\s*'/''\n/sg;

  #Brackets/quotes on the same line as assignment
  $contents =~ s/([=:])\n\s*([\(\[\{"'\w])/$1$2/sg;
  #Comma on same line as bracket/quotes
  $contents =~ s/([\]\)\}'"])\n\s*,/$1,\n/sg;
  #Name on same line as opening bracket
  $contents =~ s/(?<=\w)\s+([\[\(\{])\n/$1\n/sg;

  #Remove excessive word isolation:
  $contents =~ s/([\w-]+)\n(?! *[\(\)\[\]\{\}"'>])/$1 /sig;

  #Remove blank lines and excessive whitespace:
  $contents =~ s/\s+\n/\n/sg;
  $contents =~ s/(?<=\w)[ \t]+/ /sg;

  #Consolidate single attributes/parameters:
  $contents =~ s/"\s+(\w{1,50})\s+"/"$1"/sg;
  $contents =~ s/'\s+(\w{1,50})\s+'/'$1'/sg;
  $contents =~ s/>\s+(\w{1,50})\s+</>$1</sg;
  $contents =~ s/\{\s+(\w{1,50})\s+\}/{$1}/sg;
  $contents =~ s/\[\s+(\w{1,50})\s+\]/[$1]/sg;
  $contents =~ s/\(\s+(\w{1,50})\s+\)/($1)/sg;
  $contents =~ s/(<\w+) (\w+=["']\w+["'])(\s+)/$1$3$2$3/sig;
  $contents =~ s/\s+(['"])(\s+)>/$2$1>/sig;
}
$/ = "\n";
close(REFLOW);

print "$contents";